// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "Private/DonAINavigationPrivatePCH.h"
#include "DonAINavigation.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1DonAINavigation() {}
FName DONAINAVIGATION_AddMovementInputCustom = FName(TEXT("AddMovementInputCustom"));
FName DONAINAVIGATION_OnLocomotionAbort = FName(TEXT("OnLocomotionAbort"));
FName DONAINAVIGATION_OnLocomotionBegin = FName(TEXT("OnLocomotionBegin"));
FName DONAINAVIGATION_OnLocomotionEnd = FName(TEXT("OnLocomotionEnd"));
FName DONAINAVIGATION_OnNextSegment = FName(TEXT("OnNextSegment"));
static class UEnum* EDonNavigationQueryStatus_StaticEnum()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UEnum* Z_Construct_UEnum_DonAINavigation_EDonNavigationQueryStatus();
		Singleton = GetStaticEnum(Z_Construct_UEnum_DonAINavigation_EDonNavigationQueryStatus, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("EDonNavigationQueryStatus"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EDonNavigationQueryStatus(EDonNavigationQueryStatus_StaticEnum, TEXT("/Script/DonAINavigation"), TEXT("EDonNavigationQueryStatus"), false, nullptr, nullptr);
class UScriptStruct* FDonNavigationDynamicCollisionTask::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionTask();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionTask_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionTask, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DonNavigationDynamicCollisionTask"), sizeof(FDonNavigationDynamicCollisionTask), Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionTask_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDonNavigationDynamicCollisionTask(FDonNavigationDynamicCollisionTask::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DonNavigationDynamicCollisionTask"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationDynamicCollisionTask
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationDynamicCollisionTask()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DonNavigationDynamicCollisionTask")),new UScriptStruct::TCppStructOps<FDonNavigationDynamicCollisionTask>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationDynamicCollisionTask;
class UScriptStruct* FDonNavigationQueryTask::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationQueryTask();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDonNavigationQueryTask_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDonNavigationQueryTask, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DonNavigationQueryTask"), sizeof(FDonNavigationQueryTask), Get_Z_Construct_UScriptStruct_FDonNavigationQueryTask_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDonNavigationQueryTask(FDonNavigationQueryTask::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DonNavigationQueryTask"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationQueryTask
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationQueryTask()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DonNavigationQueryTask")),new UScriptStruct::TCppStructOps<FDonNavigationQueryTask>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationQueryTask;
class UScriptStruct* FDonNavigationTask::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationTask();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDonNavigationTask_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDonNavigationTask, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DonNavigationTask"), sizeof(FDonNavigationTask), Get_Z_Construct_UScriptStruct_FDonNavigationTask_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDonNavigationTask(FDonNavigationTask::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DonNavigationTask"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationTask
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationTask()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DonNavigationTask")),new UScriptStruct::TCppStructOps<FDonNavigationTask>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationTask;
class UScriptStruct* FDoNNavigationQueryData::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDoNNavigationQueryData();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDoNNavigationQueryData_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDoNNavigationQueryData, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DoNNavigationQueryData"), sizeof(FDoNNavigationQueryData), Get_Z_Construct_UScriptStruct_FDoNNavigationQueryData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDoNNavigationQueryData(FDoNNavigationQueryData::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DoNNavigationQueryData"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDoNNavigationQueryData
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDoNNavigationQueryData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DoNNavigationQueryData")),new UScriptStruct::TCppStructOps<FDoNNavigationQueryData>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDoNNavigationQueryData;
class UScriptStruct* FDoNNavigationDebugParams::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDoNNavigationDebugParams();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDoNNavigationDebugParams_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDoNNavigationDebugParams, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DoNNavigationDebugParams"), sizeof(FDoNNavigationDebugParams), Get_Z_Construct_UScriptStruct_FDoNNavigationDebugParams_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDoNNavigationDebugParams(FDoNNavigationDebugParams::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DoNNavigationDebugParams"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDoNNavigationDebugParams
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDoNNavigationDebugParams()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DoNNavigationDebugParams")),new UScriptStruct::TCppStructOps<FDoNNavigationDebugParams>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDoNNavigationDebugParams;
class UScriptStruct* FDoNNavigationQueryParams::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDoNNavigationQueryParams();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDoNNavigationQueryParams_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDoNNavigationQueryParams, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DoNNavigationQueryParams"), sizeof(FDoNNavigationQueryParams), Get_Z_Construct_UScriptStruct_FDoNNavigationQueryParams_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDoNNavigationQueryParams(FDoNNavigationQueryParams::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DoNNavigationQueryParams"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDoNNavigationQueryParams
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDoNNavigationQueryParams()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DoNNavigationQueryParams")),new UScriptStruct::TCppStructOps<FDoNNavigationQueryParams>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDoNNavigationQueryParams;
class UScriptStruct* FDonNavVoxelXYZ::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavVoxelXYZ();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDonNavVoxelXYZ_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDonNavVoxelXYZ, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DonNavVoxelXYZ"), sizeof(FDonNavVoxelXYZ), Get_Z_Construct_UScriptStruct_FDonNavVoxelXYZ_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDonNavVoxelXYZ(FDonNavVoxelXYZ::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DonNavVoxelXYZ"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavVoxelXYZ
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavVoxelXYZ()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DonNavVoxelXYZ")),new UScriptStruct::TCppStructOps<FDonNavVoxelXYZ>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavVoxelXYZ;
class UScriptStruct* FDonNavVoxelX::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavVoxelX();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDonNavVoxelX_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDonNavVoxelX, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DonNavVoxelX"), sizeof(FDonNavVoxelX), Get_Z_Construct_UScriptStruct_FDonNavVoxelX_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDonNavVoxelX(FDonNavVoxelX::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DonNavVoxelX"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavVoxelX
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavVoxelX()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DonNavVoxelX")),new UScriptStruct::TCppStructOps<FDonNavVoxelX>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavVoxelX;
class UScriptStruct* FDonNavVoxelY::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavVoxelY();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDonNavVoxelY_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDonNavVoxelY, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DonNavVoxelY"), sizeof(FDonNavVoxelY), Get_Z_Construct_UScriptStruct_FDonNavVoxelY_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDonNavVoxelY(FDonNavVoxelY::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DonNavVoxelY"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavVoxelY
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavVoxelY()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DonNavVoxelY")),new UScriptStruct::TCppStructOps<FDonNavVoxelY>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavVoxelY;
class UScriptStruct* FDonNavigationDynamicCollisionNotifyee::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionNotifyee();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionNotifyee_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionNotifyee, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DonNavigationDynamicCollisionNotifyee"), sizeof(FDonNavigationDynamicCollisionNotifyee), Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionNotifyee_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDonNavigationDynamicCollisionNotifyee(FDonNavigationDynamicCollisionNotifyee::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DonNavigationDynamicCollisionNotifyee"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationDynamicCollisionNotifyee
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationDynamicCollisionNotifyee()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DonNavigationDynamicCollisionNotifyee")),new UScriptStruct::TCppStructOps<FDonNavigationDynamicCollisionNotifyee>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationDynamicCollisionNotifyee;
class UScriptStruct* FDonNavigationDynamicCollisionPayload::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DonNavigationDynamicCollisionPayload"), sizeof(FDonNavigationDynamicCollisionPayload), Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDonNavigationDynamicCollisionPayload(FDonNavigationDynamicCollisionPayload::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DonNavigationDynamicCollisionPayload"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationDynamicCollisionPayload
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationDynamicCollisionPayload()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DonNavigationDynamicCollisionPayload")),new UScriptStruct::TCppStructOps<FDonNavigationDynamicCollisionPayload>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationDynamicCollisionPayload;
class UScriptStruct* FDonVoxelCollisionProfile::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonVoxelCollisionProfile();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDonVoxelCollisionProfile_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDonVoxelCollisionProfile, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DonVoxelCollisionProfile"), sizeof(FDonVoxelCollisionProfile), Get_Z_Construct_UScriptStruct_FDonVoxelCollisionProfile_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDonVoxelCollisionProfile(FDonVoxelCollisionProfile::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DonVoxelCollisionProfile"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDonVoxelCollisionProfile
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDonVoxelCollisionProfile()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DonVoxelCollisionProfile")),new UScriptStruct::TCppStructOps<FDonVoxelCollisionProfile>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDonVoxelCollisionProfile;
class UScriptStruct* FDonNavigationVoxel::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationVoxel();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FDonNavigationVoxel_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDonNavigationVoxel, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("DonNavigationVoxel"), sizeof(FDonNavigationVoxel), Get_Z_Construct_UScriptStruct_FDonNavigationVoxel_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDonNavigationVoxel(FDonNavigationVoxel::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("DonNavigationVoxel"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationVoxel
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationVoxel()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DonNavigationVoxel")),new UScriptStruct::TCppStructOps<FDonNavigationVoxel>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFDonNavigationVoxel;
	void ADonNavigationManager::StaticRegisterNativesADonNavigationManager()
	{
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "AbortPathfindingTask",(Native)&ADonNavigationManager::execAbortPathfindingTask);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "ClampLocationToNavigableWorld",(Native)&ADonNavigationManager::execClampLocationToNavigableWorld);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "ConstructBuilder",(Native)&ADonNavigationManager::execConstructBuilder);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "Debug_ClearAllVolumes",(Native)&ADonNavigationManager::execDebug_ClearAllVolumes);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "Debug_DrawAllVolumes",(Native)&ADonNavigationManager::execDebug_DrawAllVolumes);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "Debug_DrawVolumesAroundPoint",(Native)&ADonNavigationManager::execDebug_DrawVolumesAroundPoint);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "Debug_DrawVoxelCollisionProfile",(Native)&ADonNavigationManager::execDebug_DrawVoxelCollisionProfile);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "Debug_ToggleWorldBoundaryInGame",(Native)&ADonNavigationManager::execDebug_ToggleWorldBoundaryInGame);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "FindPathSolution_StressTesting",(Native)&ADonNavigationManager::execFindPathSolution_StressTesting);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "FindRandomPointAroundOriginInNavWorld",(Native)&ADonNavigationManager::execFindRandomPointAroundOriginInNavWorld);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "FindRandomPointFromActorInNavWorld",(Native)&ADonNavigationManager::execFindRandomPointFromActorInNavWorld);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "HasTask",(Native)&ADonNavigationManager::execHasTask);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "IsDirectPathLineSweep",(Native)&ADonNavigationManager::execIsDirectPathLineSweep);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "IsDirectPathLineTrace",(Native)&ADonNavigationManager::execIsDirectPathLineTrace);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "IsDirectPathSweep",(Native)&ADonNavigationManager::execIsDirectPathSweep);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "IsLocationBeneathLandscape",(Native)&ADonNavigationManager::execIsLocationBeneathLandscape);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "IsLocationWithinNavigableWorld",(Native)&ADonNavigationManager::execIsLocationWithinNavigableWorld);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "IsMeshBoundsWithinNavigableWorld",(Native)&ADonNavigationManager::execIsMeshBoundsWithinNavigableWorld);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "ScheduleDynamicCollisionUpdate",(Native)&ADonNavigationManager::execScheduleDynamicCollisionUpdate);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "SchedulePathfindingTask",(Native)&ADonNavigationManager::execSchedulePathfindingTask);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "StopListeningToDynamicCollisionsForPath",(Native)&ADonNavigationManager::execStopListeningToDynamicCollisionsForPath);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "VisualizeDynamicCollisionListeners",(Native)&ADonNavigationManager::execVisualizeDynamicCollisionListeners);
		FNativeFunctionRegistrar::RegisterFunction(ADonNavigationManager::StaticClass(), "VisualizeNAVResult",(Native)&ADonNavigationManager::execVisualizeNAVResult);
	}
	IMPLEMENT_CLASS(ADonNavigationManager, 2975697168);
	void UDonNavigationHelper::StaticRegisterNativesUDonNavigationHelper()
	{
		FNativeFunctionRegistrar::RegisterFunction(UDonNavigationHelper::StaticClass(), "DonNavigationManager",(Native)&UDonNavigationHelper::execDonNavigationManager);
	}
	IMPLEMENT_CLASS(UDonNavigationHelper, 3732517796);
class UScriptStruct* FBT_FlyToTarget_DebugParams::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FBT_FlyToTarget_DebugParams();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FBT_FlyToTarget_DebugParams_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FBT_FlyToTarget_DebugParams, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("BT_FlyToTarget_DebugParams"), sizeof(FBT_FlyToTarget_DebugParams), Get_Z_Construct_UScriptStruct_FBT_FlyToTarget_DebugParams_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FBT_FlyToTarget_DebugParams(FBT_FlyToTarget_DebugParams::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("BT_FlyToTarget_DebugParams"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFBT_FlyToTarget_DebugParams
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFBT_FlyToTarget_DebugParams()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("BT_FlyToTarget_DebugParams")),new UScriptStruct::TCppStructOps<FBT_FlyToTarget_DebugParams>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFBT_FlyToTarget_DebugParams;
	void UBTTask_FlyTo::StaticRegisterNativesUBTTask_FlyTo()
	{
		FNativeFunctionRegistrar::RegisterFunction(UBTTask_FlyTo::StaticClass(), "Pathfinding_OnDynamicCollisionAlert",(Native)&UBTTask_FlyTo::execPathfinding_OnDynamicCollisionAlert);
		FNativeFunctionRegistrar::RegisterFunction(UBTTask_FlyTo::StaticClass(), "Pathfinding_OnFinish",(Native)&UBTTask_FlyTo::execPathfinding_OnFinish);
	}
	IMPLEMENT_CLASS(UBTTask_FlyTo, 2734128306);
	void ADonNavigationManagerUnbound::StaticRegisterNativesADonNavigationManagerUnbound()
	{
	}
	IMPLEMENT_CLASS(ADonNavigationManagerUnbound, 3725347022);
	void UDoNNavigationVolumeComponent::StaticRegisterNativesUDoNNavigationVolumeComponent()
	{
	}
	IMPLEMENT_CLASS(UDoNNavigationVolumeComponent, 3810963170);
	void IDonNavigator::AddMovementInputCustom(FVector WorldDirection, float ScaleValue)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_AddMovementInputCustom instead.");
	}
	void IDonNavigator::OnLocomotionAbort()
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_OnLocomotionAbort instead.");
	}
	void IDonNavigator::OnLocomotionBegin()
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_OnLocomotionBegin instead.");
	}
	void IDonNavigator::OnLocomotionEnd()
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_OnLocomotionEnd instead.");
	}
	void IDonNavigator::OnNextSegment(FVector NextPoint)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_OnNextSegment instead.");
	}
	void UDonNavigator::StaticRegisterNativesUDonNavigator()
	{
		FNativeFunctionRegistrar::RegisterFunction(UDonNavigator::StaticClass(), "AddMovementInputCustom",(Native)&IDonNavigator::execAddMovementInputCustom);
		FNativeFunctionRegistrar::RegisterFunction(UDonNavigator::StaticClass(), "OnLocomotionAbort",(Native)&IDonNavigator::execOnLocomotionAbort);
		FNativeFunctionRegistrar::RegisterFunction(UDonNavigator::StaticClass(), "OnLocomotionBegin",(Native)&IDonNavigator::execOnLocomotionBegin);
		FNativeFunctionRegistrar::RegisterFunction(UDonNavigator::StaticClass(), "OnLocomotionEnd",(Native)&IDonNavigator::execOnLocomotionEnd);
		FNativeFunctionRegistrar::RegisterFunction(UDonNavigator::StaticClass(), "OnNextSegment",(Native)&IDonNavigator::execOnNextSegment);
	}
	IMPLEMENT_CLASS(UDonNavigator, 1959524817);
	void IDonNavigator::Execute_AddMovementInputCustom(UObject* O, FVector WorldDirection, float ScaleValue)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(UDonNavigator::StaticClass()));
		DonNavigator_eventAddMovementInputCustom_Parms Parms;
		UFunction* const Func = O->FindFunction(DONAINAVIGATION_AddMovementInputCustom);
		if (Func)
		{
			Parms.WorldDirection=WorldDirection;
			Parms.ScaleValue=ScaleValue;
			O->ProcessEvent(Func, &Parms);
		}
		else if (auto I = (IDonNavigator*)(O->GetNativeInterfaceAddress(UDonNavigator::StaticClass())))
		{
			I->AddMovementInputCustom_Implementation(WorldDirection,ScaleValue);
		}
	}
	void IDonNavigator::Execute_OnLocomotionAbort(UObject* O)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(UDonNavigator::StaticClass()));
		UFunction* const Func = O->FindFunction(DONAINAVIGATION_OnLocomotionAbort);
		if (Func)
		{
			O->ProcessEvent(Func, NULL);
		}
		else if (auto I = (IDonNavigator*)(O->GetNativeInterfaceAddress(UDonNavigator::StaticClass())))
		{
			I->OnLocomotionAbort_Implementation();
		}
	}
	void IDonNavigator::Execute_OnLocomotionBegin(UObject* O)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(UDonNavigator::StaticClass()));
		UFunction* const Func = O->FindFunction(DONAINAVIGATION_OnLocomotionBegin);
		if (Func)
		{
			O->ProcessEvent(Func, NULL);
		}
		else if (auto I = (IDonNavigator*)(O->GetNativeInterfaceAddress(UDonNavigator::StaticClass())))
		{
			I->OnLocomotionBegin_Implementation();
		}
	}
	void IDonNavigator::Execute_OnLocomotionEnd(UObject* O)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(UDonNavigator::StaticClass()));
		UFunction* const Func = O->FindFunction(DONAINAVIGATION_OnLocomotionEnd);
		if (Func)
		{
			O->ProcessEvent(Func, NULL);
		}
		else if (auto I = (IDonNavigator*)(O->GetNativeInterfaceAddress(UDonNavigator::StaticClass())))
		{
			I->OnLocomotionEnd_Implementation();
		}
	}
	void IDonNavigator::Execute_OnNextSegment(UObject* O, FVector NextPoint)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(UDonNavigator::StaticClass()));
		DonNavigator_eventOnNextSegment_Parms Parms;
		UFunction* const Func = O->FindFunction(DONAINAVIGATION_OnNextSegment);
		if (Func)
		{
			Parms.NextPoint=NextPoint;
			O->ProcessEvent(Func, &Parms);
		}
		else if (auto I = (IDonNavigator*)(O->GetNativeInterfaceAddress(UDonNavigator::StaticClass())))
		{
			I->OnNextSegment_Implementation(NextPoint);
		}
	}
class UScriptStruct* FNAVMapContainer::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FNAVMapContainer();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FNAVMapContainer_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FNAVMapContainer, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("NAVMapContainer"), sizeof(FNAVMapContainer), Get_Z_Construct_UScriptStruct_FNAVMapContainer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FNAVMapContainer(FNAVMapContainer::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("NAVMapContainer"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFNAVMapContainer
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFNAVMapContainer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("NAVMapContainer")),new UScriptStruct::TCppStructOps<FNAVMapContainer>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFNAVMapContainer;
class UScriptStruct* FNavigationGraphAerial::StaticStruct()
{
	extern DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationGraphAerial();
		extern DONAINAVIGATION_API uint32 Get_Z_Construct_UScriptStruct_FNavigationGraphAerial_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FNavigationGraphAerial, Z_Construct_UPackage__Script_DonAINavigation(), TEXT("NavigationGraphAerial"), sizeof(FNavigationGraphAerial), Get_Z_Construct_UScriptStruct_FNavigationGraphAerial_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FNavigationGraphAerial(FNavigationGraphAerial::StaticStruct, TEXT("/Script/DonAINavigation"), TEXT("NavigationGraphAerial"), false, nullptr, nullptr);
static struct FScriptStruct_DonAINavigation_StaticRegisterNativesFNavigationGraphAerial
{
	FScriptStruct_DonAINavigation_StaticRegisterNativesFNavigationGraphAerial()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("NavigationGraphAerial")),new UScriptStruct::TCppStructOps<FNavigationGraphAerial>);
	}
} ScriptStruct_DonAINavigation_StaticRegisterNativesFNavigationGraphAerial;
	void ADEPRECATED_VolumeAdaptiveBuilder::StaticRegisterNativesADEPRECATED_VolumeAdaptiveBuilder()
	{
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "BuildNAVNetwork",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execBuildNAVNetwork);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "CleanUp",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execCleanUp);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "ConstructBuilder",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execConstructBuilder);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "CreateNAVVolume",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execCreateNAVVolume);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "GenerateAdaptiveNavigationVolumeSeeds",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execGenerateAdaptiveNavigationVolumeSeeds);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "GetNAVVolumeFromComponent",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execGetNAVVolumeFromComponent);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "GetNAVVolumeFromObject",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execGetNAVVolumeFromObject);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "GetShortestPathToDestination",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execGetShortestPathToDestination);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "GetShortestPathToDestination_DebugRealtime",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execGetShortestPathToDestination_DebugRealtime);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "GrowNAVVolumeByIndex",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execGrowNAVVolumeByIndex);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "NavEntryPointFromPath",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execNavEntryPointFromPath);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "NavEntryPointsForTraversal",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execNavEntryPointsForTraversal);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "NavigaitonEntryPoint",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execNavigaitonEntryPoint);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "NavigaitonEntryPointFromVector",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execNavigaitonEntryPointFromVector);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "VisualizeNAVResult",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execVisualizeNAVResult);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "VisualizeNAVResultRealTime",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execVisualizeNAVResultRealTime);
		FNativeFunctionRegistrar::RegisterFunction(ADEPRECATED_VolumeAdaptiveBuilder::StaticClass(), "VisualizeSolution",(Native)&ADEPRECATED_VolumeAdaptiveBuilder::execVisualizeSolution);
	}
	IMPLEMENT_CLASS(ADEPRECATED_VolumeAdaptiveBuilder, 4020568253);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTaskNode();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlackboardKeySelector();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EObjectTypeQuery();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem_NoRegister();

	DONAINAVIGATION_API class UFunction* Z_Construct_UDelegateFunction_DonAINavigation_DonCollisionSamplerCallback__DelegateSignature();
	DONAINAVIGATION_API class UFunction* Z_Construct_UDelegateFunction_DonAINavigation_DoNNavigationResultHandler__DelegateSignature();
	DONAINAVIGATION_API class UFunction* Z_Construct_UDelegateFunction_DonAINavigation_DonNavigationDynamicCollisionDelegate__DelegateSignature();
	DONAINAVIGATION_API class UEnum* Z_Construct_UEnum_DonAINavigation_EDonNavigationQueryStatus();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionTask();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationQueryTask();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationTask();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDoNNavigationQueryData();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDoNNavigationDebugParams();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDoNNavigationQueryParams();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavVoxelXYZ();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavVoxelX();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavVoxelY();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionNotifyee();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonVoxelCollisionProfile();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationVoxel();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_AbortPathfindingTask();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_ClampLocationToNavigableWorld();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_ConstructBuilder();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_Debug_ClearAllVolumes();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_Debug_DrawAllVolumes();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_Debug_DrawVolumesAroundPoint();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_Debug_DrawVoxelCollisionProfile();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_Debug_ToggleWorldBoundaryInGame();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_FindPathSolution_StressTesting();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_FindRandomPointAroundOriginInNavWorld();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_FindRandomPointFromActorInNavWorld();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_HasTask();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_IsDirectPathLineSweep();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_IsDirectPathLineTrace();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_IsDirectPathSweep();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_IsLocationBeneathLandscape();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_IsLocationWithinNavigableWorld();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_IsMeshBoundsWithinNavigableWorld();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_ScheduleDynamicCollisionUpdate();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_SchedulePathfindingTask();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_StopListeningToDynamicCollisionsForPath();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_VisualizeDynamicCollisionListeners();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADonNavigationManager_VisualizeNAVResult();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_ADonNavigationManager_NoRegister();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_ADonNavigationManager();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_UDonNavigationHelper_DonNavigationManager();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_UDonNavigationHelper_NoRegister();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_UDonNavigationHelper();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FBT_FlyToTarget_DebugParams();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_UBTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_UBTTask_FlyTo_Pathfinding_OnFinish();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_UBTTask_FlyTo_NoRegister();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_UBTTask_FlyTo();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_ADonNavigationManagerUnbound_NoRegister();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_ADonNavigationManagerUnbound();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_UDoNNavigationVolumeComponent();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_UDonNavigator_AddMovementInputCustom();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_UDonNavigator_OnLocomotionAbort();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_UDonNavigator_OnLocomotionBegin();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_UDonNavigator_OnLocomotionEnd();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_UDonNavigator_OnNextSegment();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_UDonNavigator_NoRegister();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_UDonNavigator();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FNAVMapContainer();
	DONAINAVIGATION_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationGraphAerial();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_BuildNAVNetwork();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_CleanUp();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_ConstructBuilder();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_CreateNAVVolume();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GenerateAdaptiveNavigationVolumeSeeds();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetNAVVolumeFromComponent();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetNAVVolumeFromObject();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetShortestPathToDestination();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetShortestPathToDestination_DebugRealtime();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GrowNAVVolumeByIndex();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavEntryPointFromPath();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavEntryPointsForTraversal();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavigaitonEntryPoint();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavigaitonEntryPointFromVector();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeNAVResult();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeNAVResultRealTime();
	DONAINAVIGATION_API class UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeSolution();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder_NoRegister();
	DONAINAVIGATION_API class UClass* Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
	DONAINAVIGATION_API class UPackage* Z_Construct_UPackage__Script_DonAINavigation();
	UFunction* Z_Construct_UDelegateFunction_DonAINavigation_DonCollisionSamplerCallback__DelegateSignature()
	{
		struct _Script_DonAINavigation_eventDonCollisionSamplerCallback_Parms
		{
			bool bTaskSuccessful;
		};
		UObject* Outer=Z_Construct_UPackage__Script_DonAINavigation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonCollisionSamplerCallback__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(_Script_DonAINavigation_eventDonCollisionSamplerCallback_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTaskSuccessful, _Script_DonAINavigation_eventDonCollisionSamplerCallback_Parms, bool);
			UProperty* NewProp_bTaskSuccessful = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTaskSuccessful"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTaskSuccessful, _Script_DonAINavigation_eventDonCollisionSamplerCallback_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bTaskSuccessful, _Script_DonAINavigation_eventDonCollisionSamplerCallback_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("DECLARE_DYNAMIC_DELEGATE(FDonCollisionSamplerCallback);"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_DonAINavigation_DoNNavigationResultHandler__DelegateSignature()
	{
		struct _Script_DonAINavigation_eventDoNNavigationResultHandler_Parms
		{
			FDoNNavigationQueryData Data;
		};
		UObject* Outer=Z_Construct_UPackage__Script_DonAINavigation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoNNavigationResultHandler__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(_Script_DonAINavigation_eventDoNNavigationResultHandler_Parms));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Data, _Script_DonAINavigation_eventDoNNavigationResultHandler_Parms), 0x0010008008000182, Z_Construct_UScriptStruct_FDoNNavigationQueryData());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Non-Dynamic verison of result delegate:\n\nDECLARE_DELEGATE_OneParam( FDoNNavigationResultHandler, const FDoNNavigationQueryData& )\n\nConsider enabling this for C++ users depending on performance implications of the currently used dynamic delegates (Epic documentation states dynamic delegates are slower).\nThis will require maintenance of two sets of delegate types across the board and a separate API entry point for C++/BP users (UFUNCTIONs only accept dynamic delegate parameters).\n@todo: profile this with high volume load once the system is stable to verify if there are any notable performance benefits in using static delegates."));
			MetaData->SetValue(NewProp_Data, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_DonAINavigation_DonNavigationDynamicCollisionDelegate__DelegateSignature()
	{
		struct _Script_DonAINavigation_eventDonNavigationDynamicCollisionDelegate_Parms
		{
			FDonNavigationDynamicCollisionPayload Data;
		};
		UObject* Outer=Z_Construct_UPackage__Script_DonAINavigation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavigationDynamicCollisionDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(_Script_DonAINavigation_eventDonNavigationDynamicCollisionDelegate_Parms));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Data, _Script_DonAINavigation_eventDonNavigationDynamicCollisionDelegate_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_Data, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_DonAINavigation_EDonNavigationQueryStatus()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UEnum_DonAINavigation_EDonNavigationQueryStatus_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EDonNavigationQueryStatus"), 0, Get_Z_Construct_UEnum_DonAINavigation_EDonNavigationQueryStatus_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDonNavigationQueryStatus"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDonNavigationQueryStatus::Unscheduled")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDonNavigationQueryStatus::InProgress")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDonNavigationQueryStatus::Success")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDonNavigationQueryStatus::Failure")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDonNavigationQueryStatus::QueryHasNoSolution")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDonNavigationQueryStatus::TimedOut")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDonNavigationQueryStatus::EDonNavigationQueryStatus_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EDonNavigationQueryStatus");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_DonAINavigation_EDonNavigationQueryStatus_CRC() { return 539503555U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionTask()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionTask_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DonNavigationDynamicCollisionTask"), sizeof(FDonNavigationDynamicCollisionTask), Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionTask_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavigationDynamicCollisionTask"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FDonNavigationTask(), new UScriptStruct::TCppStructOps<FDonNavigationDynamicCollisionTask>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionTask_CRC() { return 2218561211U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationQueryTask()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDonNavigationQueryTask_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DonNavigationQueryTask"), sizeof(FDonNavigationQueryTask), Get_Z_Construct_UScriptStruct_FDonNavigationQueryTask_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavigationQueryTask"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FDonNavigationTask(), new UScriptStruct::TCppStructOps<FDonNavigationQueryTask>, EStructFlags(0x00000005));
			UProperty* NewProp_DynamicCollisionListener = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicCollisionListener"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(DynamicCollisionListener, FDonNavigationQueryTask), 0x0010000000080000, Z_Construct_UDelegateFunction_DonAINavigation_DonNavigationDynamicCollisionDelegate__DelegateSignature());
			UProperty* NewProp_ResultHandler = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResultHandler"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(ResultHandler, FDonNavigationQueryTask), 0x0010000000080000, Z_Construct_UDelegateFunction_DonAINavigation_DoNNavigationResultHandler__DelegateSignature());
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Data, FDonNavigationQueryTask), 0x0010008000000014, Z_Construct_UScriptStruct_FDoNNavigationQueryData());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_DynamicCollisionListener, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_ResultHandler, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_Data, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_Data, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDonNavigationQueryTask_CRC() { return 2176698286U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationTask()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDonNavigationTask_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DonNavigationTask"), sizeof(FDonNavigationTask), Get_Z_Construct_UScriptStruct_FDonNavigationTask_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavigationTask"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDonNavigationTask>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDonNavigationTask_CRC() { return 3152446875U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDoNNavigationQueryData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDoNNavigationQueryData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DoNNavigationQueryData"), sizeof(FDoNNavigationQueryData), Get_Z_Construct_UScriptStruct_FDoNNavigationQueryData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoNNavigationQueryData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDoNNavigationQueryData>, EStructFlags(0x00000005));
			UProperty* NewProp_QueryStatus = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QueryStatus"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(QueryStatus, FDoNNavigationQueryData), 0x0010000000000014, Z_Construct_UEnum_DonAINavigation_EDonNavigationQueryStatus());
			UProperty* NewProp_QueryStatus_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_QueryStatus, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_PathSolutionOptimized = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PathSolutionOptimized"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolutionOptimized, FDoNNavigationQueryData), 0x0010000000000014);
			UProperty* NewProp_PathSolutionOptimized_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolutionOptimized, TEXT("PathSolutionOptimized"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_QueryParams = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QueryParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(QueryParams, FDoNNavigationQueryData), 0x0010000000000014, Z_Construct_UScriptStruct_FDoNNavigationQueryParams());
			UProperty* NewProp_Destination = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Destination"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Destination, FDoNNavigationQueryData), 0x0010000000000014, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Origin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Origin, FDoNNavigationQueryData), 0x0010000000000014, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_CollisionComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UWeakObjectProperty(CPP_PROPERTY_BASE(CollisionComponent, FDoNNavigationQueryData), 0x0014000000080008, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UWeakObjectProperty(CPP_PROPERTY_BASE(Actor, FDoNNavigationQueryData), 0x0014000000000014, Z_Construct_UClass_AActor_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_QueryStatus, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_QueryStatus, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_PathSolutionOptimized, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_PathSolutionOptimized, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_QueryParams, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_QueryParams, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_Destination, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_Destination, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_Origin, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_Origin, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_CollisionComponent, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_Actor, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_Actor, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_Actor, TEXT("ToolTip"), TEXT("Query input"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDoNNavigationQueryData_CRC() { return 4284698376U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDoNNavigationDebugParams()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDoNNavigationDebugParams_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DoNNavigationDebugParams"), sizeof(FDoNNavigationDebugParams), Get_Z_Construct_UScriptStruct_FDoNNavigationDebugParams_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoNNavigationDebugParams"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDoNNavigationDebugParams>, EStructFlags(0x00000001));
			UProperty* NewProp_LineDuration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LineDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineDuration, FDoNNavigationDebugParams), 0x0010000000000005);
			UProperty* NewProp_LineThickness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LineThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineThickness, FDoNNavigationDebugParams), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualizeInRealTime, FDoNNavigationDebugParams, bool);
			UProperty* NewProp_VisualizeInRealTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VisualizeInRealTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualizeInRealTime, FDoNNavigationDebugParams), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(VisualizeInRealTime, FDoNNavigationDebugParams), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualizeOptimizedPath, FDoNNavigationDebugParams, bool);
			UProperty* NewProp_VisualizeOptimizedPath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VisualizeOptimizedPath"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualizeOptimizedPath, FDoNNavigationDebugParams), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(VisualizeOptimizedPath, FDoNNavigationDebugParams), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualizeRawPath, FDoNNavigationDebugParams, bool);
			UProperty* NewProp_VisualizeRawPath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VisualizeRawPath"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualizeRawPath, FDoNNavigationDebugParams), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(VisualizeRawPath, FDoNNavigationDebugParams), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebugVolumes, FDoNNavigationDebugParams, bool);
			UProperty* NewProp_DrawDebugVolumes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrawDebugVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebugVolumes, FDoNNavigationDebugParams), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(DrawDebugVolumes, FDoNNavigationDebugParams), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_LineDuration, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_LineDuration, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_LineDuration, TEXT("ToolTip"), TEXT("-1 signifies persistent lines that need to be flushed out manually to clear them"));
			MetaData->SetValue(NewProp_LineThickness, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_LineThickness, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_VisualizeInRealTime, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_VisualizeInRealTime, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_VisualizeOptimizedPath, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_VisualizeOptimizedPath, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_VisualizeRawPath, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_VisualizeRawPath, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_DrawDebugVolumes, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_DrawDebugVolumes, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDoNNavigationDebugParams_CRC() { return 2053127216U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDoNNavigationQueryParams()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDoNNavigationQueryParams_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DoNNavigationQueryParams"), sizeof(FDoNNavigationQueryParams), Get_Z_Construct_UScriptStruct_FDoNNavigationQueryParams_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoNNavigationQueryParams"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDoNNavigationQueryParams>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTemp_WalkSolution, FDoNNavigationQueryParams, bool);
			UProperty* NewProp_bTemp_WalkSolution = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTemp_WalkSolution"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTemp_WalkSolution, FDoNNavigationQueryParams), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bTemp_WalkSolution, FDoNNavigationQueryParams), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceRescheduleQuery, FDoNNavigationQueryParams, bool);
			UProperty* NewProp_bForceRescheduleQuery = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bForceRescheduleQuery"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceRescheduleQuery, FDoNNavigationQueryParams), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bForceRescheduleQuery, FDoNNavigationQueryParams), sizeof(bool), true);
			UProperty* NewProp_CollisionShapeInflation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionShapeInflation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CollisionShapeInflation, FDoNNavigationQueryParams), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPreciseDynamicCollisionRepathing, FDoNNavigationQueryParams, bool);
			UProperty* NewProp_bPreciseDynamicCollisionRepathing = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bPreciseDynamicCollisionRepathing"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPreciseDynamicCollisionRepathing, FDoNNavigationQueryParams), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bPreciseDynamicCollisionRepathing, FDoNNavigationQueryParams), sizeof(bool), true);
			UProperty* NewProp_MaxOptimizerSweepAttemptsPerNode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxOptimizerSweepAttemptsPerNode"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxOptimizerSweepAttemptsPerNode, FDoNNavigationQueryParams), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSkipOptimizationPass, FDoNNavigationQueryParams, bool);
			UProperty* NewProp_bSkipOptimizationPass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSkipOptimizationPass"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSkipOptimizationPass, FDoNNavigationQueryParams), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bSkipOptimizationPass, FDoNNavigationQueryParams), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFlexibleOriginGoal, FDoNNavigationQueryParams, bool);
			UProperty* NewProp_bFlexibleOriginGoal = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bFlexibleOriginGoal"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFlexibleOriginGoal, FDoNNavigationQueryParams), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bFlexibleOriginGoal, FDoNNavigationQueryParams), sizeof(bool), true);
			UProperty* NewProp_QueryTimeout = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QueryTimeout"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(QueryTimeout, FDoNNavigationQueryParams), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_bTemp_WalkSolution, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_bTemp_WalkSolution, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_bForceRescheduleQuery, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_bForceRescheduleQuery, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_bForceRescheduleQuery, TEXT("ToolTip"), TEXT("By default the navigation manager will not allow you to schedule a new query if a pre-existing query\n scheduled by you is not yet complete. You can override this behavior by forcing the manager to abort\n the old query and reschedule this one. Use with discretion: Hammering the manager with queries can\n quickly degrade performance (especially in a dynamic collision context)."));
			MetaData->SetValue(NewProp_CollisionShapeInflation, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_CollisionShapeInflation, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_CollisionShapeInflation, TEXT("ToolTip"), TEXT("Allows you to inflate your mesh's collision extents by a fixed increment for all sweep based testing.\n Typically used if you find your mesh bumping into obstacles while navigating along path solutions."));
			MetaData->SetValue(NewProp_bPreciseDynamicCollisionRepathing, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_bPreciseDynamicCollisionRepathing, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_bPreciseDynamicCollisionRepathing, TEXT("ToolTip"), TEXT("Enabling this will sample all voxels of your pawn or character for determining whether a path solution\nneeds to be recalculated due to dynamic obstacles. This will improve the accuracy of response to dynamic collisions\nbut comes at a steep cost as the number of event delegates required for listening to precise dynamic collisions is high\nOnly use this if you really need to."));
			MetaData->SetValue(NewProp_MaxOptimizerSweepAttemptsPerNode, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_MaxOptimizerSweepAttemptsPerNode, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_bSkipOptimizationPass, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_bSkipOptimizationPass, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_bSkipOptimizationPass, TEXT("ToolTip"), TEXT("Skips optimization of the path solution completely. Optimized paths are shorter and more visually cogent\n but come at a cost. Maps with low voxel density (high VoxelSize value) usually need optimization for best results"));
			MetaData->SetValue(NewProp_bFlexibleOriginGoal, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_bFlexibleOriginGoal, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_QueryTimeout, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_QueryTimeout, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_QueryTimeout, TEXT("ToolTip"), TEXT("If a query takes more time to run than the value specified here, the pathfinding task will abort\n This is useful to prevent expensive queries (eg: by passing a destination for which no solution exists)\n from clogging up the pathfinding system"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDoNNavigationQueryParams_CRC() { return 3960211714U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDonNavVoxelXYZ()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDonNavVoxelXYZ_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DonNavVoxelXYZ"), sizeof(FDonNavVoxelXYZ), Get_Z_Construct_UScriptStruct_FDonNavVoxelXYZ_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavVoxelXYZ"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDonNavVoxelXYZ>, EStructFlags(0x00000001));
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("X"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(X, FDonNavVoxelXYZ), 0x0010000000000000);
			UProperty* NewProp_X_Inner = new(EC_InternalUseOnlyConstructor, NewProp_X, TEXT("X"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDonNavVoxelX());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_X, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDonNavVoxelXYZ_CRC() { return 4204339051U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDonNavVoxelX()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDonNavVoxelX_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DonNavVoxelX"), sizeof(FDonNavVoxelX), Get_Z_Construct_UScriptStruct_FDonNavVoxelX_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavVoxelX"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDonNavVoxelX>, EStructFlags(0x00000001));
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Y"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Y, FDonNavVoxelX), 0x0010000000000000);
			UProperty* NewProp_Y_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Y, TEXT("Y"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDonNavVoxelY());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_Y, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDonNavVoxelX_CRC() { return 3958873447U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDonNavVoxelY()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDonNavVoxelY_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DonNavVoxelY"), sizeof(FDonNavVoxelY), Get_Z_Construct_UScriptStruct_FDonNavVoxelY_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavVoxelY"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDonNavVoxelY>, EStructFlags(0x00000001));
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Z"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Z, FDonNavVoxelY), 0x0010000000000000);
			UProperty* NewProp_Z_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Z, TEXT("Z"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDonNavigationVoxel());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@todo: convert to regular struct and profile startup speed. Usinng a USTRUCT for these may be excessive"));
			MetaData->SetValue(NewProp_Z, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDonNavVoxelY_CRC() { return 2570098127U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionNotifyee()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionNotifyee_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DonNavigationDynamicCollisionNotifyee"), sizeof(FDonNavigationDynamicCollisionNotifyee), Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionNotifyee_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavigationDynamicCollisionNotifyee"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDonNavigationDynamicCollisionNotifyee>, EStructFlags(0x00000005));
			UProperty* NewProp_Listener = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Listener"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(Listener, FDonNavigationDynamicCollisionNotifyee), 0x0010000000080000, Z_Construct_UDelegateFunction_DonAINavigation_DonNavigationDynamicCollisionDelegate__DelegateSignature());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("note: non-dynamic delegate can't be used as a function parameter apparently"));
			MetaData->SetValue(NewProp_Listener, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionNotifyee_CRC() { return 829299394U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DonNavigationDynamicCollisionPayload"), sizeof(FDonNavigationDynamicCollisionPayload), Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavigationDynamicCollisionPayload"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDonNavigationDynamicCollisionPayload>, EStructFlags(0x00000001));
			UProperty* NewProp_Voxel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Voxel"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Voxel, FDonNavigationDynamicCollisionPayload), 0x0010000000000014, Z_Construct_UScriptStruct_FDonNavigationVoxel());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_Voxel, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_Voxel, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload_CRC() { return 3208599666U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDonVoxelCollisionProfile()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDonVoxelCollisionProfile_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DonVoxelCollisionProfile"), sizeof(FDonVoxelCollisionProfile), Get_Z_Construct_UScriptStruct_FDonVoxelCollisionProfile_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonVoxelCollisionProfile"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDonVoxelCollisionProfile>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDonVoxelCollisionProfile_CRC() { return 3855075248U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDonNavigationVoxel()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FDonNavigationVoxel_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DonNavigationVoxel"), sizeof(FDonNavigationVoxel), Get_Z_Construct_UScriptStruct_FDonNavigationVoxel_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavigationVoxel"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDonNavigationVoxel>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDonNavigationVoxel_CRC() { return 479967665U; }
	UFunction* Z_Construct_UFunction_ADonNavigationManager_AbortPathfindingTask()
	{
		struct DonNavigationManager_eventAbortPathfindingTask_Parms
		{
			AActor* Actor;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbortPathfindingTask"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(DonNavigationManager_eventAbortPathfindingTask_Parms));
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, DonNavigationManager_eventAbortPathfindingTask_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Aborts an existing pathfinding task for a given Actor"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_ClampLocationToNavigableWorld()
	{
		struct DonNavigationManager_eventClampLocationToNavigableWorld_Parms
		{
			FVector DesiredLocation;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClampLocationToNavigableWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14820401, 65535, sizeof(DonNavigationManager_eventClampLocationToNavigableWorld_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, DonNavigationManager_eventClampLocationToNavigableWorld_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DesiredLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DesiredLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DesiredLocation, DonNavigationManager_eventClampLocationToNavigableWorld_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clamps a vector to the navigation bounds as defined by the grid configuraiton of the navigation object you've placed in the map"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_ConstructBuilder()
	{
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConstructBuilder"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("World generation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_Debug_ClearAllVolumes()
	{
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Debug_ClearAllVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_Debug_DrawAllVolumes()
	{
		struct DonNavigationManager_eventDebug_DrawAllVolumes_Parms
		{
			float LineThickness;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Debug_DrawAllVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(DonNavigationManager_eventDebug_DrawAllVolumes_Parms));
			UProperty* NewProp_LineThickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineThickness, DonNavigationManager_eventDebug_DrawAllVolumes_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_Debug_DrawVolumesAroundPoint()
	{
		struct DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms
		{
			FVector Location;
			int32 CubeSize;
			bool DrawPersistentLines;
			float Duration;
			float LineThickness;
			bool bAutoInitializeVolumes;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Debug_DrawVolumesAroundPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoInitializeVolumes, DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms, bool);
			UProperty* NewProp_bAutoInitializeVolumes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAutoInitializeVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoInitializeVolumes, DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bAutoInitializeVolumes, DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms), sizeof(bool), true);
			UProperty* NewProp_LineThickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineThickness, DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms), 0x0010000000000080);
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawPersistentLines, DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms, bool);
			UProperty* NewProp_DrawPersistentLines = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawPersistentLines"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawPersistentLines, DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawPersistentLines, DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms), sizeof(bool), true);
			UProperty* NewProp_CubeSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CubeSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CubeSize, DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms), 0x0010000000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, DonNavigationManager_eventDebug_DrawVolumesAroundPoint_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAutoInitializeVolumes"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_Debug_DrawVoxelCollisionProfile()
	{
		struct DonNavigationManager_eventDebug_DrawVoxelCollisionProfile_Parms
		{
			UPrimitiveComponent* MeshOrPrimitive;
			bool bDrawPersistent;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Debug_DrawVoxelCollisionProfile"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(DonNavigationManager_eventDebug_DrawVoxelCollisionProfile_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, DonNavigationManager_eventDebug_DrawVoxelCollisionProfile_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDrawPersistent, DonNavigationManager_eventDebug_DrawVoxelCollisionProfile_Parms, bool);
			UProperty* NewProp_bDrawPersistent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bDrawPersistent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDrawPersistent, DonNavigationManager_eventDebug_DrawVoxelCollisionProfile_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bDrawPersistent, DonNavigationManager_eventDebug_DrawVoxelCollisionProfile_Parms), sizeof(bool), true);
			UProperty* NewProp_MeshOrPrimitive = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MeshOrPrimitive"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MeshOrPrimitive, DonNavigationManager_eventDebug_DrawVoxelCollisionProfile_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bDrawPersistent"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_MeshOrPrimitive, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_Debug_ToggleWorldBoundaryInGame()
	{
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Debug_ToggleWorldBoundaryInGame"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_FindPathSolution_StressTesting()
	{
		struct DonNavigationManager_eventFindPathSolution_StressTesting_Parms
		{
			AActor* Actor;
			FVector Destination;
			TArray<FVector> PathSolutionRaw;
			TArray<FVector> PathSolutionOptimized;
			FDoNNavigationQueryParams QueryParams;
			FDoNNavigationDebugParams DebugParams;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindPathSolution_StressTesting"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(DonNavigationManager_eventFindPathSolution_StressTesting_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DonNavigationManager_eventFindPathSolution_StressTesting_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DonNavigationManager_eventFindPathSolution_StressTesting_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DonNavigationManager_eventFindPathSolution_StressTesting_Parms), sizeof(bool), true);
			UProperty* NewProp_DebugParams = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DebugParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DebugParams, DonNavigationManager_eventFindPathSolution_StressTesting_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FDoNNavigationDebugParams());
			UProperty* NewProp_QueryParams = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QueryParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(QueryParams, DonNavigationManager_eventFindPathSolution_StressTesting_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FDoNNavigationQueryParams());
			UProperty* NewProp_PathSolutionOptimized = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolutionOptimized"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolutionOptimized, DonNavigationManager_eventFindPathSolution_StressTesting_Parms), 0x0010000000000180);
			UProperty* NewProp_PathSolutionOptimized_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolutionOptimized, TEXT("PathSolutionOptimized"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PathSolutionRaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolutionRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolutionRaw, DonNavigationManager_eventFindPathSolution_StressTesting_Parms), 0x0010000000000180);
			UProperty* NewProp_PathSolutionRaw_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolutionRaw, TEXT("PathSolutionRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Destination = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Destination"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Destination, DonNavigationManager_eventFindPathSolution_StressTesting_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, DonNavigationManager_eventFindPathSolution_StressTesting_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("WARNING: This function is for stress-testing for performance only, it operates synchronously unlike the scheduler functions making it great for profiling sessions.\nUse SchedulePathfindingTask for regular navigation and pathfinding usecases.\n\nGiven an actor (representing origin) and a destination point in the world, this function generates the shortest path between the two.\n\n@param  Actor                  Actor which needs to navigate from one point to another. Typically (but not necessarily) a pawn. The location of this actor is treated as origin for pathfinding\n@param  Destination            Point in the world to which the actor needs to travel\n@param  PathSolutionRaw        Path solution as an array of FVectors representing the shortest path from origin to destination\n@param  PathSolutionOptimized  Path solution optimized from the raw path by performing collision sweeps using the actor's collision component\n@param  QueryParams            Additional params for the path finding query\n@param  DebugParams            Use these debug params to enable visualization of the raw and optimized paths and other debug related activities"));
			MetaData->SetValue(NewProp_DebugParams, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_QueryParams, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_FindRandomPointAroundOriginInNavWorld()
	{
		struct DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms
		{
			AActor* NavigationActor;
			FVector Origin;
			float Distance;
			bool bFoundValidResult;
			float MaxDesiredAltitude;
			float MaxZAngularDispacement;
			int32 MaxAttempts;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindRandomPointAroundOriginInNavWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C20401, 65535, sizeof(DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_MaxAttempts = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxAttempts"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxAttempts, DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms), 0x0010000000000080);
			UProperty* NewProp_MaxZAngularDispacement = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxZAngularDispacement"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxZAngularDispacement, DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms), 0x0010000000000080);
			UProperty* NewProp_MaxDesiredAltitude = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxDesiredAltitude"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxDesiredAltitude, DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFoundValidResult, DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms, bool);
			UProperty* NewProp_bFoundValidResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFoundValidResult"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFoundValidResult, DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(bFoundValidResult, DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms), sizeof(bool), true);
			UProperty* NewProp_Distance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Distance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Distance, DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms), 0x0010000000000080);
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Origin, DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_NavigationActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NavigationActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NavigationActor, DonNavigationManager_eventFindRandomPointAroundOriginInNavWorld_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaxAttempts"), TEXT("5"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaxDesiredAltitude"), TEXT("-1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaxZAngularDispacement"), TEXT("15.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_FindRandomPointFromActorInNavWorld()
	{
		struct DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms
		{
			AActor* Actor;
			float Distance;
			bool bFoundValidResult;
			float MaxDesiredAltitude;
			float MaxZAngularDispacement;
			int32 MaxAttempts;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindRandomPointFromActorInNavWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C20401, 65535, sizeof(DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_MaxAttempts = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxAttempts"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxAttempts, DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms), 0x0010000000000080);
			UProperty* NewProp_MaxZAngularDispacement = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxZAngularDispacement"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxZAngularDispacement, DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms), 0x0010000000000080);
			UProperty* NewProp_MaxDesiredAltitude = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxDesiredAltitude"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxDesiredAltitude, DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFoundValidResult, DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms, bool);
			UProperty* NewProp_bFoundValidResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFoundValidResult"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFoundValidResult, DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(bFoundValidResult, DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms), sizeof(bool), true);
			UProperty* NewProp_Distance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Distance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Distance, DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms), 0x0010000000000080);
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, DonNavigationManager_eventFindRandomPointFromActorInNavWorld_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaxAttempts"), TEXT("5"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaxDesiredAltitude"), TEXT("-1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaxZAngularDispacement"), TEXT("15.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("AI Utility Functions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_HasTask()
	{
		struct DonNavigationManager_eventHasTask_Parms
		{
			AActor* Actor;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasTask"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(DonNavigationManager_eventHasTask_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DonNavigationManager_eventHasTask_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DonNavigationManager_eventHasTask_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DonNavigationManager_eventHasTask_Parms), sizeof(bool), true);
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, DonNavigationManager_eventHasTask_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does this actor have an active pathfinding task already scheduled with the navigation manager?"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_IsDirectPathLineSweep()
	{
		struct DonNavigationManager_eventIsDirectPathLineSweep_Parms
		{
			UPrimitiveComponent* CollisionComponent;
			FVector Start;
			FVector End;
			FHitResult OutHit;
			bool bFindInitialOverlaps;
			float CollisionShapeInflation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsDirectPathLineSweep"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(DonNavigationManager_eventIsDirectPathLineSweep_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DonNavigationManager_eventIsDirectPathLineSweep_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DonNavigationManager_eventIsDirectPathLineSweep_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DonNavigationManager_eventIsDirectPathLineSweep_Parms), sizeof(bool), true);
			UProperty* NewProp_CollisionShapeInflation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CollisionShapeInflation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CollisionShapeInflation, DonNavigationManager_eventIsDirectPathLineSweep_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFindInitialOverlaps, DonNavigationManager_eventIsDirectPathLineSweep_Parms, bool);
			UProperty* NewProp_bFindInitialOverlaps = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFindInitialOverlaps"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFindInitialOverlaps, DonNavigationManager_eventIsDirectPathLineSweep_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bFindInitialOverlaps, DonNavigationManager_eventIsDirectPathLineSweep_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutHit, DonNavigationManager_eventIsDirectPathLineSweep_Parms), 0x0010008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(End, DonNavigationManager_eventIsDirectPathLineSweep_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Start, DonNavigationManager_eventIsDirectPathLineSweep_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_CollisionComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CollisionComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CollisionComponent, DonNavigationManager_eventIsDirectPathLineSweep_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bFindInitialOverlaps"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CollisionShapeInflation"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_CollisionComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_IsDirectPathLineTrace()
	{
		struct DonNavigationManager_eventIsDirectPathLineTrace_Parms
		{
			FVector start;
			FVector end;
			FHitResult OutHit;
			TArray<AActor*> ActorsToIgnore;
			bool bFindInitialOverlaps;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsDirectPathLineTrace"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(DonNavigationManager_eventIsDirectPathLineTrace_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DonNavigationManager_eventIsDirectPathLineTrace_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DonNavigationManager_eventIsDirectPathLineTrace_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DonNavigationManager_eventIsDirectPathLineTrace_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFindInitialOverlaps, DonNavigationManager_eventIsDirectPathLineTrace_Parms, bool);
			UProperty* NewProp_bFindInitialOverlaps = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFindInitialOverlaps"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFindInitialOverlaps, DonNavigationManager_eventIsDirectPathLineTrace_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bFindInitialOverlaps, DonNavigationManager_eventIsDirectPathLineTrace_Parms), sizeof(bool), true);
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, DonNavigationManager_eventIsDirectPathLineTrace_Parms), 0x0010000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutHit, DonNavigationManager_eventIsDirectPathLineTrace_Parms), 0x0010008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_end = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("end"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(end, DonNavigationManager_eventIsDirectPathLineTrace_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("start"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(start, DonNavigationManager_eventIsDirectPathLineTrace_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bFindInitialOverlaps"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_ActorsToIgnore, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_IsDirectPathSweep()
	{
		struct DonNavigationManager_eventIsDirectPathSweep_Parms
		{
			UPrimitiveComponent* CollisionComponent;
			FVector Start;
			FVector End;
			FHitResult OutHit;
			bool bFindInitialOverlaps;
			float CollisionShapeInflation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsDirectPathSweep"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(DonNavigationManager_eventIsDirectPathSweep_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DonNavigationManager_eventIsDirectPathSweep_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DonNavigationManager_eventIsDirectPathSweep_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DonNavigationManager_eventIsDirectPathSweep_Parms), sizeof(bool), true);
			UProperty* NewProp_CollisionShapeInflation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CollisionShapeInflation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CollisionShapeInflation, DonNavigationManager_eventIsDirectPathSweep_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFindInitialOverlaps, DonNavigationManager_eventIsDirectPathSweep_Parms, bool);
			UProperty* NewProp_bFindInitialOverlaps = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFindInitialOverlaps"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFindInitialOverlaps, DonNavigationManager_eventIsDirectPathSweep_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bFindInitialOverlaps, DonNavigationManager_eventIsDirectPathSweep_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutHit, DonNavigationManager_eventIsDirectPathSweep_Parms), 0x0010008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(End, DonNavigationManager_eventIsDirectPathSweep_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Start, DonNavigationManager_eventIsDirectPathSweep_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_CollisionComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CollisionComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CollisionComponent, DonNavigationManager_eventIsDirectPathSweep_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bFindInitialOverlaps"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CollisionShapeInflation"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tracing utility"));
			MetaData->SetValue(NewProp_CollisionComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_IsLocationBeneathLandscape()
	{
		struct DonNavigationManager_eventIsLocationBeneathLandscape_Parms
		{
			FVector Location;
			float LineTraceHeight;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsLocationBeneathLandscape"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14820401, 65535, sizeof(DonNavigationManager_eventIsLocationBeneathLandscape_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DonNavigationManager_eventIsLocationBeneathLandscape_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DonNavigationManager_eventIsLocationBeneathLandscape_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DonNavigationManager_eventIsLocationBeneathLandscape_Parms), sizeof(bool), true);
			UProperty* NewProp_LineTraceHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineTraceHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineTraceHeight, DonNavigationManager_eventIsLocationBeneathLandscape_Parms), 0x0010000000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, DonNavigationManager_eventIsLocationBeneathLandscape_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LineTraceHeight"), TEXT("3000.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This is an edge case where the goal is beneath the landscape (and therefore can never be reached). This situation should be identified pre-emptively and dealt with to prevent a futile and expensive call"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_IsLocationWithinNavigableWorld()
	{
		struct DonNavigationManager_eventIsLocationWithinNavigableWorld_Parms
		{
			FVector DesiredLocation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsLocationWithinNavigableWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14820401, 65535, sizeof(DonNavigationManager_eventIsLocationWithinNavigableWorld_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DonNavigationManager_eventIsLocationWithinNavigableWorld_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DonNavigationManager_eventIsLocationWithinNavigableWorld_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DonNavigationManager_eventIsLocationWithinNavigableWorld_Parms), sizeof(bool), true);
			UProperty* NewProp_DesiredLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DesiredLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DesiredLocation, DonNavigationManager_eventIsLocationWithinNavigableWorld_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_IsMeshBoundsWithinNavigableWorld()
	{
		struct DonNavigationManager_eventIsMeshBoundsWithinNavigableWorld_Parms
		{
			UPrimitiveComponent* Mesh;
			float BoundsScaleFactor;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsMeshBoundsWithinNavigableWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(DonNavigationManager_eventIsMeshBoundsWithinNavigableWorld_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DonNavigationManager_eventIsMeshBoundsWithinNavigableWorld_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DonNavigationManager_eventIsMeshBoundsWithinNavigableWorld_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DonNavigationManager_eventIsMeshBoundsWithinNavigableWorld_Parms), sizeof(bool), true);
			UProperty* NewProp_BoundsScaleFactor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoundsScaleFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BoundsScaleFactor, DonNavigationManager_eventIsMeshBoundsWithinNavigableWorld_Parms), 0x0010000000000080);
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, DonNavigationManager_eventIsMeshBoundsWithinNavigableWorld_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BoundsScaleFactor"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_ScheduleDynamicCollisionUpdate()
	{
		struct DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms
		{
			UPrimitiveComponent* Mesh;
			FScriptDelegate ResultHandler;
			FName CustomCacheIdentifier;
			bool bReplaceExistingTask;
			bool bDisableCacheUsage;
			bool bReloadCollisionCache;
			bool bUseCheapBoundsCollision;
			float BoundsScaleFactor;
			bool bForceSynchronousExecution;
			bool bDrawDebug;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScheduleDynamicCollisionUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDrawDebug, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms, bool);
			UProperty* NewProp_bDrawDebug = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bDrawDebug"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDrawDebug, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bDrawDebug, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceSynchronousExecution, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms, bool);
			UProperty* NewProp_bForceSynchronousExecution = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bForceSynchronousExecution"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceSynchronousExecution, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bForceSynchronousExecution, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), sizeof(bool), true);
			UProperty* NewProp_BoundsScaleFactor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoundsScaleFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BoundsScaleFactor, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseCheapBoundsCollision, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms, bool);
			UProperty* NewProp_bUseCheapBoundsCollision = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bUseCheapBoundsCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseCheapBoundsCollision, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bUseCheapBoundsCollision, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReloadCollisionCache, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms, bool);
			UProperty* NewProp_bReloadCollisionCache = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bReloadCollisionCache"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReloadCollisionCache, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bReloadCollisionCache, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableCacheUsage, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms, bool);
			UProperty* NewProp_bDisableCacheUsage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bDisableCacheUsage"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableCacheUsage, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bDisableCacheUsage, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReplaceExistingTask, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms, bool);
			UProperty* NewProp_bReplaceExistingTask = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bReplaceExistingTask"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReplaceExistingTask, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bReplaceExistingTask, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), sizeof(bool), true);
			UProperty* NewProp_CustomCacheIdentifier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CustomCacheIdentifier"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(CustomCacheIdentifier, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000000080);
			UProperty* NewProp_ResultHandler = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResultHandler"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(ResultHandler, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000000080, Z_Construct_UDelegateFunction_DonAINavigation_DonCollisionSamplerCallback__DelegateSignature());
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, DonNavigationManager_eventScheduleDynamicCollisionUpdate_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bDisableCacheUsage"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bDrawDebug"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bForceSynchronousExecution"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BoundsScaleFactor"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bReloadCollisionCache"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bReplaceExistingTask"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bUseCheapBoundsCollision"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CustomCacheIdentifier"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Schedule Dynamic Collision Update For Mesh\n\nUpdates the collision status of all voxels within a mesh's visibility bounds. You should call this function whenever a dynamic obstacle in your scene\nmoves, scales or morphs in any way that affects the collision. Always remember that the DoN Navigation system does not automatically detect dynamic voxel collision\nas that would be too expensive for the system to manage (potentially millions of voxels reside in a scene). Therefore it relies on users of the plugin to manually\ntrigger dynamic collision depending on the unique needs of a particular project. You only need this for any object that moves after the game has begun, voxel collision\nfor static objects is exempt from this as they're mananged through a different code path and lazy-loaded on demand.\n\nThis function is expensive as it samples per-voxel collision so use it with care.\n\n@param  Mesh                                                           The mesh (usually a movable object) whose collision influence needs to be updated around the current location of the mesh\n\n@param  ResultHandler                      Use this delegate to be notified when the task is complete and to learn its final status\n\n@param  CustomCacheIdentifier              Use this to share a single collision profile across multiple meshes or to fully customize what gets loaded into the collision cache.\n\n                                           Details: By default the collision cache uses the address of each mesh component as the cache key. This has two fundamental limitations:\n                                                                                       1. Multiple meshes with identical collision properties will end up creating individual entries in the cache despite being the same (collision wise).\n                                                                                       2. Any mesh that needs to change its rotation or scale cannot use the default cache value which only works for location based translations.\n\n                                           The first limitation can be easily sovled by sharing a single cache identifier across all meshes of the same type (Eg: \"SolidWall_NoRotation\").\n                                           The second limitation can be resolved either by forcibly reloading the collision cache each time using bReloadCollisionCache (not recommended, very expensive)\n                                           OR you can use the Custom Cache Identifier to define cardinal translation points for your mesh as follows:\n                                           Eg: Mesh Scale = 1.5f -> CustomCacheIdentifier = \"SolidWall_NoRotation_150p\",\n                                           Eg: Mesh Scale = 2.0f -> CustomCacheIdentifier = \"SolidWall_NoRotation_200p\", etc.\n                                           Using this technique instead of forcibly reloading the cache will improve your performance. Try to keep your identifiers short though!\n\n@param  bReplaceExistingTask               By default the scheduler will ignore new tasks for a mesh if it already has one running. Use this to forcibly repalce an existing task.\n                                           This is useful for advanced usecases where you're relying on the sequence of dynamic collision updates or triggering other events dependent on its success\n\n@param  bReloadCollisionCache                          Default is false. The system maintains a cache of voxel collision profiles associated with a mesh. A cache entry is created for a mesh\n                                           the first time you call this function for it. If you really want to overwrite the cache value associated with a mesh\n                                           then set bReloadCollisionCache to true. However for most usecases it is recommended to use CustomCacheIdentifier instead.\n\n\n@param  bUseCheapBoundsCollision                       Marks all voxels within the mesh's visibility bounds as collided. This is several times faster that per-voxel sampling. Great for simple meshes like walls\n                                                                                       whose visibility bounds closely aligns with the actual mesh itself.\n\n@param  BoundsScaleFactor                              Use this multiplier to increase or decrease the size of the bounding box derived from your mesh within which voxel collisions are sampled."));
			MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_SchedulePathfindingTask()
	{
		struct DonNavigationManager_eventSchedulePathfindingTask_Parms
		{
			AActor* Actor;
			FVector Destination;
			FDoNNavigationQueryParams QueryParams;
			FDoNNavigationDebugParams DebugParams;
			FScriptDelegate ResultHandlerDelegate;
			FScriptDelegate DynamicCollisionListener;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SchedulePathfindingTask"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(DonNavigationManager_eventSchedulePathfindingTask_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DonNavigationManager_eventSchedulePathfindingTask_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DonNavigationManager_eventSchedulePathfindingTask_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DonNavigationManager_eventSchedulePathfindingTask_Parms), sizeof(bool), true);
			UProperty* NewProp_DynamicCollisionListener = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DynamicCollisionListener"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(DynamicCollisionListener, DonNavigationManager_eventSchedulePathfindingTask_Parms), 0x0010000000000080, Z_Construct_UDelegateFunction_DonAINavigation_DonNavigationDynamicCollisionDelegate__DelegateSignature());
			UProperty* NewProp_ResultHandlerDelegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResultHandlerDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(ResultHandlerDelegate, DonNavigationManager_eventSchedulePathfindingTask_Parms), 0x0010000000000080, Z_Construct_UDelegateFunction_DonAINavigation_DoNNavigationResultHandler__DelegateSignature());
			UProperty* NewProp_DebugParams = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DebugParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DebugParams, DonNavigationManager_eventSchedulePathfindingTask_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FDoNNavigationDebugParams());
			UProperty* NewProp_QueryParams = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QueryParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(QueryParams, DonNavigationManager_eventSchedulePathfindingTask_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FDoNNavigationQueryParams());
			UProperty* NewProp_Destination = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Destination"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Destination, DonNavigationManager_eventSchedulePathfindingTask_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, DonNavigationManager_eventSchedulePathfindingTask_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Schedule Pathfinding Task\n\nSchedules a pathfinding task to generate the shortest available path between a given actor and a desired destination.\nA pathfinding task can run across multiple ticks and when the results are ready the caller is immediately notified through a result handler (FDoNNavigationResultHandler)\nThe caller must bind the result handler in advance to be notified when results are ready.\nIf you're interested in listening to dynamic collisions that may have invalidated the path (for course correction, etc) then you must also bind the dynamic listener FDonNavigationDynamicCollisionDelegate\n\n@param  Actor                    Actor which needs to navigate from one point to another. Typically (but not necessarily) a pawn. The location of this actor is treated as origin for pathfinding\n@param  Destination              Point in the world to which the actor needs to travel\n@param  QueryParams              Additional params for customizing the path finding query\n@param  DebugParams              Use these debug params to enable visualization of the raw and optimized paths and other debug related activities\n@param  ResultHandlerDelegate    You must bind a function of your choice to this delegate to be notified when pathfinding results are available for you to use\n@param DynamicCollisionListener  This listener allows you to be notified whenever your path solution has been invalidated by dynamic obstacles that have occupied parts of your path solution\n                                                                     that may previously have been navigable. Typically this means you should immediately reschedule your query to obtain a revised path solution"));
			MetaData->SetValue(NewProp_DebugParams, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_QueryParams, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_StopListeningToDynamicCollisionsForPath()
	{
		struct DonNavigationManager_eventStopListeningToDynamicCollisionsForPath_Parms
		{
			FScriptDelegate ListenerToClear;
			FDoNNavigationQueryData QueryData;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StopListeningToDynamicCollisionsForPath"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(DonNavigationManager_eventStopListeningToDynamicCollisionsForPath_Parms));
			UProperty* NewProp_QueryData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QueryData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(QueryData, DonNavigationManager_eventStopListeningToDynamicCollisionsForPath_Parms), 0x0010008008000182, Z_Construct_UScriptStruct_FDoNNavigationQueryData());
			UProperty* NewProp_ListenerToClear = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ListenerToClear"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(ListenerToClear, DonNavigationManager_eventStopListeningToDynamicCollisionsForPath_Parms), 0x0010000000000080, Z_Construct_UDelegateFunction_DonAINavigation_DonNavigationDynamicCollisionDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Unregisters a given dynamic collision listener from a given volume. Your should always call this function whenever a particular actor or object is\nno longer interested in listening to collisions in a particular area. This is especially important for maintaining performance as\naccumulating unwanted collision listeners will clog up the system quickly and affect performance."));
			MetaData->SetValue(NewProp_QueryData, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_VisualizeDynamicCollisionListeners()
	{
		struct DonNavigationManager_eventVisualizeDynamicCollisionListeners_Parms
		{
			FScriptDelegate Listener;
			FDoNNavigationQueryData QueryData;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VisualizeDynamicCollisionListeners"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(DonNavigationManager_eventVisualizeDynamicCollisionListeners_Parms));
			UProperty* NewProp_QueryData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QueryData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(QueryData, DonNavigationManager_eventVisualizeDynamicCollisionListeners_Parms), 0x0010008008000182, Z_Construct_UScriptStruct_FDoNNavigationQueryData());
			UProperty* NewProp_Listener = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Listener"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(Listener, DonNavigationManager_eventVisualizeDynamicCollisionListeners_Parms), 0x0010000000000080, Z_Construct_UDelegateFunction_DonAINavigation_DonNavigationDynamicCollisionDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(NewProp_QueryData, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADonNavigationManager_VisualizeNAVResult()
	{
		struct DonNavigationManager_eventVisualizeNAVResult_Parms
		{
			TArray<FVector> PathSolution;
			FVector Source;
			FVector Destination;
			bool Reset;
			FDoNNavigationDebugParams DebugParams;
			FColor LineColor;
		};
		UObject* Outer=Z_Construct_UClass_ADonNavigationManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VisualizeNAVResult"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(DonNavigationManager_eventVisualizeNAVResult_Parms));
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineColor, DonNavigationManager_eventVisualizeNAVResult_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_DebugParams = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DebugParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DebugParams, DonNavigationManager_eventVisualizeNAVResult_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FDoNNavigationDebugParams());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Reset, DonNavigationManager_eventVisualizeNAVResult_Parms, bool);
			UProperty* NewProp_Reset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reset"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Reset, DonNavigationManager_eventVisualizeNAVResult_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(Reset, DonNavigationManager_eventVisualizeNAVResult_Parms), sizeof(bool), true);
			UProperty* NewProp_Destination = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Destination"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Destination, DonNavigationManager_eventVisualizeNAVResult_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Source"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Source, DonNavigationManager_eventVisualizeNAVResult_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PathSolution = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolution"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolution, DonNavigationManager_eventVisualizeNAVResult_Parms), 0x0010000008000182);
			UProperty* NewProp_PathSolution_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolution, TEXT("PathSolution"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Debug helpers:"));
			MetaData->SetValue(NewProp_LineColor, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_DebugParams, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_PathSolution, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ADonNavigationManager_NoRegister()
	{
		return ADonNavigationManager::StaticClass();
	}
	UClass* Z_Construct_UClass_ADonNavigationManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_DonAINavigation();
			OuterClass = ADonNavigationManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_AbortPathfindingTask());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_ClampLocationToNavigableWorld());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_ConstructBuilder());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_Debug_ClearAllVolumes());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_Debug_DrawAllVolumes());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_Debug_DrawVolumesAroundPoint());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_Debug_DrawVoxelCollisionProfile());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_Debug_ToggleWorldBoundaryInGame());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_FindPathSolution_StressTesting());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_FindRandomPointAroundOriginInNavWorld());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_FindRandomPointFromActorInNavWorld());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_HasTask());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_IsDirectPathLineSweep());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_IsDirectPathLineTrace());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_IsDirectPathSweep());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_IsLocationBeneathLandscape());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_IsLocationWithinNavigableWorld());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_IsMeshBoundsWithinNavigableWorld());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_ScheduleDynamicCollisionUpdate());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_SchedulePathfindingTask());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_StopListeningToDynamicCollisionsForPath());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_VisualizeDynamicCollisionListeners());
				OuterClass->LinkChild(Z_Construct_UFunction_ADonNavigationManager_VisualizeNAVResult());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRunDebugValidationsForDynamicCollisions, ADonNavigationManager, bool);
				UProperty* NewProp_bRunDebugValidationsForDynamicCollisions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRunDebugValidationsForDynamicCollisions"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRunDebugValidationsForDynamicCollisions, ADonNavigationManager), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bRunDebugValidationsForDynamicCollisions, ADonNavigationManager), sizeof(bool), true);
				UProperty* NewProp_DebugVoxelsLineThickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugVoxelsLineThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DebugVoxelsLineThickness, ADonNavigationManager), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisplayWorldBoundaryInGame, ADonNavigationManager, bool);
				UProperty* NewProp_bDisplayWorldBoundaryInGame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisplayWorldBoundaryInGame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisplayWorldBoundaryInGame, ADonNavigationManager), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bDisplayWorldBoundaryInGame, ADonNavigationManager), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisplayWorldBoundary, ADonNavigationManager, bool);
				UProperty* NewProp_bDisplayWorldBoundary = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisplayWorldBoundary"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisplayWorldBoundary, ADonNavigationManager), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bDisplayWorldBoundary, ADonNavigationManager), sizeof(bool), true);
				UProperty* NewProp_WorldBoundaryVisualizer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldBoundaryVisualizer"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldBoundaryVisualizer, ADonNavigationManager), 0x0010000000080008, Z_Construct_UClass_UBoxComponent_NoRegister());
				UProperty* NewProp_MaxCollisionSolverIterationsOnThread = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxCollisionSolverIterationsOnThread"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxCollisionSolverIterationsOnThread, ADonNavigationManager), 0x0010000000000005);
				UProperty* NewProp_MaxPathSolverIterationsOnThread = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxPathSolverIterationsOnThread"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxPathSolverIterationsOnThread, ADonNavigationManager), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMultiThreadingEnabled, ADonNavigationManager, bool);
				UProperty* NewProp_bMultiThreadingEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMultiThreadingEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMultiThreadingEnabled, ADonNavigationManager), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bMultiThreadingEnabled, ADonNavigationManager), sizeof(bool), true);
				UProperty* NewProp_MaxCollisionSolverIterationsPerTick = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxCollisionSolverIterationsPerTick"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxCollisionSolverIterationsPerTick, ADonNavigationManager), 0x0010000000000005);
				UProperty* NewProp_MaxPathSolverIterationsPerTick = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxPathSolverIterationsPerTick"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxPathSolverIterationsPerTick, ADonNavigationManager), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(PerformCollisionChecksOnStartup, ADonNavigationManager, bool);
				UProperty* NewProp_PerformCollisionChecksOnStartup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PerformCollisionChecksOnStartup"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PerformCollisionChecksOnStartup, ADonNavigationManager), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(PerformCollisionChecksOnStartup, ADonNavigationManager), sizeof(bool), true);
				UProperty* NewProp_AutoCorrectionGuessList = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AutoCorrectionGuessList"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AutoCorrectionGuessList, ADonNavigationManager), 0x0010000000000005);
				UProperty* NewProp_AutoCorrectionGuessList_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AutoCorrectionGuessList, TEXT("AutoCorrectionGuessList"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ActorsToIgnoreForCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActorsToIgnoreForCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnoreForCollision, ADonNavigationManager), 0x0010000000000005);
				UProperty* NewProp_ActorsToIgnoreForCollision_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnoreForCollision, TEXT("ActorsToIgnoreForCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_ObstacleQueryChannels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ObstacleQueryChannels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ObstacleQueryChannels, ADonNavigationManager), 0x0010000000000005);
				UProperty* NewProp_ObstacleQueryChannels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObstacleQueryChannels, TEXT("ObstacleQueryChannels"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_ECollisionChannel());
				UProperty* NewProp_ZGridSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ZGridSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ZGridSize, ADonNavigationManager), 0x0010000000000005);
				UProperty* NewProp_YGridSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("YGridSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(YGridSize, ADonNavigationManager), 0x0010000000000005);
				UProperty* NewProp_XGridSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("XGridSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(XGridSize, ADonNavigationManager), 0x0010000000000005);
				UProperty* NewProp_VoxelSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VoxelSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VoxelSize, ADonNavigationManager), 0x0010000000000005);
				UProperty* NewProp_NAVVolumeData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NAVVolumeData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NAVVolumeData, ADonNavigationManager), 0x0010000000000014, Z_Construct_UScriptStruct_FDonNavVoxelXYZ());
				UProperty* NewProp_Billboard = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Billboard"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Billboard, ADonNavigationManager), 0x00100000000b001d, Z_Construct_UClass_UBillboardComponent_NoRegister());
				UProperty* NewProp_SceneComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SceneComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SceneComponent, ADonNavigationManager), 0x00100000000b001d, Z_Construct_UClass_USceneComponent_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsUnbound, ADonNavigationManager, bool);
				UProperty* NewProp_bIsUnbound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsUnbound"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsUnbound, ADonNavigationManager), 0x0010000000000014, CPP_BOOL_PROPERTY_BITMASK(bIsUnbound, ADonNavigationManager), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_AbortPathfindingTask(), "AbortPathfindingTask"); // 1685200532
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_ClampLocationToNavigableWorld(), "ClampLocationToNavigableWorld"); // 2511734678
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_ConstructBuilder(), "ConstructBuilder"); // 1895575368
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_Debug_ClearAllVolumes(), "Debug_ClearAllVolumes"); // 346546206
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_Debug_DrawAllVolumes(), "Debug_DrawAllVolumes"); // 3057411631
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_Debug_DrawVolumesAroundPoint(), "Debug_DrawVolumesAroundPoint"); // 416336167
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_Debug_DrawVoxelCollisionProfile(), "Debug_DrawVoxelCollisionProfile"); // 253157656
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_Debug_ToggleWorldBoundaryInGame(), "Debug_ToggleWorldBoundaryInGame"); // 2522481735
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_FindPathSolution_StressTesting(), "FindPathSolution_StressTesting"); // 1704256560
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_FindRandomPointAroundOriginInNavWorld(), "FindRandomPointAroundOriginInNavWorld"); // 3005158938
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_FindRandomPointFromActorInNavWorld(), "FindRandomPointFromActorInNavWorld"); // 1977746427
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_HasTask(), "HasTask"); // 1153687875
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_IsDirectPathLineSweep(), "IsDirectPathLineSweep"); // 3861934935
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_IsDirectPathLineTrace(), "IsDirectPathLineTrace"); // 4111262365
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_IsDirectPathSweep(), "IsDirectPathSweep"); // 825440887
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_IsLocationBeneathLandscape(), "IsLocationBeneathLandscape"); // 271670069
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_IsLocationWithinNavigableWorld(), "IsLocationWithinNavigableWorld"); // 2639466561
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_IsMeshBoundsWithinNavigableWorld(), "IsMeshBoundsWithinNavigableWorld"); // 3743239920
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_ScheduleDynamicCollisionUpdate(), "ScheduleDynamicCollisionUpdate"); // 2681820052
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_SchedulePathfindingTask(), "SchedulePathfindingTask"); // 1856012554
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_StopListeningToDynamicCollisionsForPath(), "StopListeningToDynamicCollisionsForPath"); // 3533188597
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_VisualizeDynamicCollisionListeners(), "VisualizeDynamicCollisionListeners"); // 2345210132
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADonNavigationManager_VisualizeNAVResult(), "VisualizeNAVResult"); // 4059722871
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DonNavigationManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_bRunDebugValidationsForDynamicCollisions, TEXT("Category"), TEXT("Debug"));
				MetaData->SetValue(NewProp_bRunDebugValidationsForDynamicCollisions, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_DebugVoxelsLineThickness, TEXT("Category"), TEXT("Debug"));
				MetaData->SetValue(NewProp_DebugVoxelsLineThickness, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_bDisplayWorldBoundaryInGame, TEXT("Category"), TEXT("Debug"));
				MetaData->SetValue(NewProp_bDisplayWorldBoundaryInGame, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_bDisplayWorldBoundary, TEXT("Category"), TEXT("Debug"));
				MetaData->SetValue(NewProp_bDisplayWorldBoundary, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_bDisplayWorldBoundary, TEXT("ToolTip"), TEXT("This property will help you identify issues with your dynamic collision setup by performinge extra vaildations at run-time.\n      This can be expensive so it is disabled by default. Enable if, for example, your pawns are reacting to dynamic collisions that they shouldn't actually be interested in."));
				MetaData->SetValue(NewProp_WorldBoundaryVisualizer, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_WorldBoundaryVisualizer, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_WorldBoundaryVisualizer, TEXT("ToolTip"), TEXT("Debug helpers:"));
				MetaData->SetValue(NewProp_MaxCollisionSolverIterationsOnThread, TEXT("Category"), TEXT("Performance Settings - Multithreading"));
				MetaData->SetValue(NewProp_MaxCollisionSolverIterationsOnThread, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_MaxPathSolverIterationsOnThread, TEXT("Category"), TEXT("Performance Settings - Multithreading"));
				MetaData->SetValue(NewProp_MaxPathSolverIterationsOnThread, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_bMultiThreadingEnabled, TEXT("Category"), TEXT("Performance Settings - Multithreading"));
				MetaData->SetValue(NewProp_bMultiThreadingEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_MaxCollisionSolverIterationsPerTick, TEXT("Category"), TEXT("Performance Settings"));
				MetaData->SetValue(NewProp_MaxCollisionSolverIterationsPerTick, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_MaxPathSolverIterationsPerTick, TEXT("Category"), TEXT("Performance Settings"));
				MetaData->SetValue(NewProp_MaxPathSolverIterationsPerTick, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_MaxPathSolverIterationsPerTick, TEXT("ToolTip"), TEXT("Performance setings"));
				MetaData->SetValue(NewProp_PerformCollisionChecksOnStartup, TEXT("Category"), TEXT("Game Startup"));
				MetaData->SetValue(NewProp_PerformCollisionChecksOnStartup, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_PerformCollisionChecksOnStartup, TEXT("ToolTip"), TEXT("If set to true, collision checks will be performed for each and every voxel when the game begins. Warning: This can slow down loading of the game significantly.\nDefault behavior is set to false, meaning collision data will always be lazy loaded upn demand. This is the recommended approach"));
				MetaData->SetValue(NewProp_AutoCorrectionGuessList, TEXT("Category"), TEXT("ObstacleDetection"));
				MetaData->SetValue(NewProp_AutoCorrectionGuessList, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_AutoCorrectionGuessList, TEXT("ToolTip"), TEXT("Some pathfinding scenarios need a special auto-correction to be applied to either origin or\n      * destination for pathfinding to work. Eg: If a player is hiding flush with a wall then the pathfinding origin\n      * must be offset slightly adjacent to the wall.\n      * Different games/maps will need different auto-correction values, some maps may need large correction values\n      * while others may need only small adjustments. Tweak this list based on your game's needs."));
				MetaData->SetValue(NewProp_ActorsToIgnoreForCollision, TEXT("Category"), TEXT("ObstacleDetection"));
				MetaData->SetValue(NewProp_ActorsToIgnoreForCollision, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_ObstacleQueryChannels, TEXT("Category"), TEXT("ObstacleDetection"));
				MetaData->SetValue(NewProp_ObstacleQueryChannels, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_ObstacleQueryChannels, TEXT("ToolTip"), TEXT("Any channels added here will be treated as obstacles by the path finder"));
				MetaData->SetValue(NewProp_ZGridSize, TEXT("Category"), TEXT("World Dimensions"));
				MetaData->SetValue(NewProp_ZGridSize, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_ZGridSize, TEXT("ToolTip"), TEXT("The number of voxels to build along the Z axis (offset from NAV actor)"));
				MetaData->SetValue(NewProp_YGridSize, TEXT("Category"), TEXT("World Dimensions"));
				MetaData->SetValue(NewProp_YGridSize, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_YGridSize, TEXT("ToolTip"), TEXT("The number of voxels to build along the Y axis (offset from NAV actor)"));
				MetaData->SetValue(NewProp_XGridSize, TEXT("Category"), TEXT("World Dimensions"));
				MetaData->SetValue(NewProp_XGridSize, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_XGridSize, TEXT("ToolTip"), TEXT("The number of voxels to build along the X axis (offset from NAV actor)"));
				MetaData->SetValue(NewProp_VoxelSize, TEXT("Category"), TEXT("World Dimensions"));
				MetaData->SetValue(NewProp_VoxelSize, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_VoxelSize, TEXT("ToolTip"), TEXT("Represents the side of the cube used to build the voxel. Eg: a value of 300 produces a cube 300x300x300"));
				MetaData->SetValue(NewProp_NAVVolumeData, TEXT("Category"), TEXT("DoN Navigation"));
				MetaData->SetValue(NewProp_NAVVolumeData, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_Billboard, TEXT("Category"), TEXT("Translation"));
				MetaData->SetValue(NewProp_Billboard, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Billboard, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_SceneComponent, TEXT("Category"), TEXT("Translation"));
				MetaData->SetValue(NewProp_SceneComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SceneComponent, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
				MetaData->SetValue(NewProp_bIsUnbound, TEXT("Category"), TEXT("DoN Navigation"));
				MetaData->SetValue(NewProp_bIsUnbound, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManager.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ADonNavigationManager(Z_Construct_UClass_ADonNavigationManager, &ADonNavigationManager::StaticClass, TEXT("ADonNavigationManager"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ADonNavigationManager);
	UFunction* Z_Construct_UFunction_UDonNavigationHelper_DonNavigationManager()
	{
		struct DonNavigationHelper_eventDonNavigationManager_Parms
		{
			UObject* WorldContextObject;
			ADonNavigationManager* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UDonNavigationHelper();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DonNavigationManager"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(DonNavigationHelper_eventDonNavigationManager_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, DonNavigationHelper_eventDonNavigationManager_Parms), 0x0010000000000580, Z_Construct_UClass_ADonNavigationManager_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, DonNavigationHelper_eventDonNavigationManager_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationHelper.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the Voxel navigation builder used for building navigation volumes and performing pathfinding"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UDonNavigationHelper_NoRegister()
	{
		return UDonNavigationHelper::StaticClass();
	}
	UClass* Z_Construct_UClass_UDonNavigationHelper()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_DonAINavigation();
			OuterClass = UDonNavigationHelper::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UDonNavigationHelper_DonNavigationManager());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UDonNavigationHelper_DonNavigationManager(), "DonNavigationManager"); // 1005355397
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DonNavigationHelper.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationHelper.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDonNavigationHelper(Z_Construct_UClass_UDonNavigationHelper, &UDonNavigationHelper::StaticClass, TEXT("UDonNavigationHelper"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDonNavigationHelper);
	UScriptStruct* Z_Construct_UScriptStruct_FBT_FlyToTarget_DebugParams()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FBT_FlyToTarget_DebugParams_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("BT_FlyToTarget_DebugParams"), sizeof(FBT_FlyToTarget_DebugParams), Get_Z_Construct_UScriptStruct_FBT_FlyToTarget_DebugParams_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BT_FlyToTarget_DebugParams"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FDoNNavigationDebugParams(), new UScriptStruct::TCppStructOps<FBT_FlyToTarget_DebugParams>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bVisualizePawnAsVoxels, FBT_FlyToTarget_DebugParams, bool);
			UProperty* NewProp_bVisualizePawnAsVoxels = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bVisualizePawnAsVoxels"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bVisualizePawnAsVoxels, FBT_FlyToTarget_DebugParams), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bVisualizePawnAsVoxels, FBT_FlyToTarget_DebugParams), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
			MetaData->SetValue(NewProp_bVisualizePawnAsVoxels, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(NewProp_bVisualizePawnAsVoxels, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBT_FlyToTarget_DebugParams_CRC() { return 3703858695U; }
	UFunction* Z_Construct_UFunction_UBTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert()
	{
		struct BTTask_FlyTo_eventPathfinding_OnDynamicCollisionAlert_Parms
		{
			FDonNavigationDynamicCollisionPayload Data;
		};
		UObject* Outer=Z_Construct_UClass_UBTTask_FlyTo();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pathfinding_OnDynamicCollisionAlert"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BTTask_FlyTo_eventPathfinding_OnDynamicCollisionAlert_Parms));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Data, BTTask_FlyTo_eventPathfinding_OnDynamicCollisionAlert_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FDonNavigationDynamicCollisionPayload());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
			MetaData->SetValue(NewProp_Data, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_FlyTo_Pathfinding_OnFinish()
	{
		struct BTTask_FlyTo_eventPathfinding_OnFinish_Parms
		{
			FDoNNavigationQueryData Data;
		};
		UObject* Outer=Z_Construct_UClass_UBTTask_FlyTo();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pathfinding_OnFinish"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BTTask_FlyTo_eventPathfinding_OnFinish_Parms));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Data, BTTask_FlyTo_eventPathfinding_OnFinish_Parms), 0x0010008008000182, Z_Construct_UScriptStruct_FDoNNavigationQueryData());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DoN Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
			MetaData->SetValue(NewProp_Data, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBTTask_FlyTo_NoRegister()
	{
		return UBTTask_FlyTo::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_FlyTo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_DonAINavigation();
			OuterClass = UBTTask_FlyTo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_FlyTo_Pathfinding_OnFinish());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NavigationManager = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavigationManager"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NavigationManager, UBTTask_FlyTo), 0x0010000000000014, Z_Construct_UClass_ADonNavigationManager_NoRegister());
				UProperty* NewProp_DebugParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DebugParams, UBTTask_FlyTo), 0x0010000000000005, Z_Construct_UScriptStruct_FBT_FlyToTarget_DebugParams());
				UProperty* NewProp_QueryParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(QueryParams, UBTTask_FlyTo), 0x0010000000000005, Z_Construct_UScriptStruct_FDoNNavigationQueryParams());
				UProperty* NewProp_MinimumProximityRequired = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumProximityRequired"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinimumProximityRequired, UBTTask_FlyTo), 0x0010000000000005);
				UProperty* NewProp_KeyToFlipFlopWhenTaskExits = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyToFlipFlopWhenTaskExits"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(KeyToFlipFlopWhenTaskExits, UBTTask_FlyTo), 0x0010000000000005, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_FlightResultKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FlightResultKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FlightResultKey, UBTTask_FlyTo), 0x0010000000000005, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_FlightLocationKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FlightLocationKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FlightLocationKey, UBTTask_FlyTo), 0x0010000000000005, Z_Construct_UScriptStruct_FBlackboardKeySelector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert(), "Pathfinding_OnDynamicCollisionAlert"); // 3602950476
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_FlyTo_Pathfinding_OnFinish(), "Pathfinding_OnFinish"); // 3765574101
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BTTask_FlyTo.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_NavigationManager, TEXT("Category"), TEXT("DoN Navigation"));
				MetaData->SetValue(NewProp_NavigationManager, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
				MetaData->SetValue(NewProp_DebugParams, TEXT("Category"), TEXT("DoN Navigation"));
				MetaData->SetValue(NewProp_DebugParams, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
				MetaData->SetValue(NewProp_QueryParams, TEXT("Category"), TEXT("DoN Navigation"));
				MetaData->SetValue(NewProp_QueryParams, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
				MetaData->SetValue(NewProp_MinimumProximityRequired, TEXT("Category"), TEXT("DoN Navigation"));
				MetaData->SetValue(NewProp_MinimumProximityRequired, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
				MetaData->SetValue(NewProp_KeyToFlipFlopWhenTaskExits, TEXT("Category"), TEXT("DoN Navigation"));
				MetaData->SetValue(NewProp_KeyToFlipFlopWhenTaskExits, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
				MetaData->SetValue(NewProp_KeyToFlipFlopWhenTaskExits, TEXT("ToolTip"), TEXT("Optional: This boolean will be flip-flopped at the end of this task (regardless of success or failure). This can be useful for certain types of behavior tree setups"));
				MetaData->SetValue(NewProp_FlightResultKey, TEXT("Category"), TEXT("DoN Navigation"));
				MetaData->SetValue(NewProp_FlightResultKey, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
				MetaData->SetValue(NewProp_FlightResultKey, TEXT("ToolTip"), TEXT("Optional: Useful in somecases where you want failure or success of a task to automatically update a particular blackboard key"));
				MetaData->SetValue(NewProp_FlightLocationKey, TEXT("Category"), TEXT("DoN Navigation"));
				MetaData->SetValue(NewProp_FlightLocationKey, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTask_FlyTo.h"));
				MetaData->SetValue(NewProp_FlightLocationKey, TEXT("ToolTip"), TEXT("Behavior Tree Input:"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_FlyTo(Z_Construct_UClass_UBTTask_FlyTo, &UBTTask_FlyTo::StaticClass, TEXT("UBTTask_FlyTo"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_FlyTo);
	UClass* Z_Construct_UClass_ADonNavigationManagerUnbound_NoRegister()
	{
		return ADonNavigationManagerUnbound::StaticClass();
	}
	UClass* Z_Construct_UClass_ADonNavigationManagerUnbound()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ADonNavigationManager();
			Z_Construct_UPackage__Script_DonAINavigation();
			OuterClass = ADonNavigationManagerUnbound::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DonNavigationManagerUnbound.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigationManagerUnbound.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ADonNavigationManagerUnbound(Z_Construct_UClass_ADonNavigationManagerUnbound, &ADonNavigationManagerUnbound::StaticClass, TEXT("ADonNavigationManagerUnbound"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ADonNavigationManagerUnbound);
	UClass* Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister()
	{
		return UDoNNavigationVolumeComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UDoNNavigationVolumeComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBoxComponent();
			Z_Construct_UPackage__Script_DonAINavigation();
			OuterClass = UDoNNavigationVolumeComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A01080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CanNavigate, UDoNNavigationVolumeComponent, bool);
				UProperty* NewProp_CanNavigate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CanNavigate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CanNavigate, UDoNNavigationVolumeComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(CanNavigate, UDoNNavigationVolumeComponent), sizeof(bool), true);
				UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Z"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Z, UDoNNavigationVolumeComponent), 0x0010000000020015);
				UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Y"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Y, UDoNNavigationVolumeComponent), 0x0010000000020015);
				UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("X"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(X, UDoNNavigationVolumeComponent), 0x0010000000020015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object LOD Lighting TextureStreaming Object LOD Lighting TextureStreaming Activation Components|Activation Trigger"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Legacy/DEPRECATED_DoNNavigationVolumeComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_DoNNavigationVolumeComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_CanNavigate, TEXT("Category"), TEXT("AerialNavigationVolume"));
				MetaData->SetValue(NewProp_CanNavigate, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_DoNNavigationVolumeComponent.h"));
				MetaData->SetValue(NewProp_Z, TEXT("Category"), TEXT("AerialNavigation"));
				MetaData->SetValue(NewProp_Z, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_DoNNavigationVolumeComponent.h"));
				MetaData->SetValue(NewProp_Y, TEXT("Category"), TEXT("AerialNavigation"));
				MetaData->SetValue(NewProp_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_DoNNavigationVolumeComponent.h"));
				MetaData->SetValue(NewProp_X, TEXT("Category"), TEXT("AerialNavigation"));
				MetaData->SetValue(NewProp_X, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_DoNNavigationVolumeComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDoNNavigationVolumeComponent(Z_Construct_UClass_UDoNNavigationVolumeComponent, &UDoNNavigationVolumeComponent::StaticClass, TEXT("UDoNNavigationVolumeComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDoNNavigationVolumeComponent);
	UFunction* Z_Construct_UFunction_UDonNavigator_AddMovementInputCustom()
	{
		UObject* Outer=Z_Construct_UClass_UDonNavigator();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddMovementInputCustom"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08820C00, 65535, sizeof(DonNavigator_eventAddMovementInputCustom_Parms));
			UProperty* NewProp_ScaleValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScaleValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScaleValue, DonNavigator_eventAddMovementInputCustom_Parms), 0x0010000000000080);
			UProperty* NewProp_WorldDirection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldDirection, DonNavigator_eventAddMovementInputCustom_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Don Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigatorInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Optional custom movement input. If not provided, default AddMovementInput behavior will be called on the pawn or character"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UDonNavigator_OnLocomotionAbort()
	{
		UObject* Outer=Z_Construct_UClass_UDonNavigator();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnLocomotionAbort"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020C00, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Don Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigatorInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UDonNavigator_OnLocomotionBegin()
	{
		UObject* Outer=Z_Construct_UClass_UDonNavigator();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnLocomotionBegin"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020C00, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Don Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigatorInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UDonNavigator_OnLocomotionEnd()
	{
		UObject* Outer=Z_Construct_UClass_UDonNavigator();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnLocomotionEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020C00, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Don Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigatorInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UDonNavigator_OnNextSegment()
	{
		UObject* Outer=Z_Construct_UClass_UDonNavigator();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnNextSegment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08820C00, 65535, sizeof(DonNavigator_eventOnNextSegment_Parms));
			UProperty* NewProp_NextPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NextPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NextPoint, DonNavigator_eventOnNextSegment_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Don Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigatorInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UDonNavigator_NoRegister()
	{
		return UDonNavigator::StaticClass();
	}
	UClass* Z_Construct_UClass_UDonNavigator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_DonAINavigation();
			OuterClass = UDonNavigator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20104081;

				OuterClass->LinkChild(Z_Construct_UFunction_UDonNavigator_AddMovementInputCustom());
				OuterClass->LinkChild(Z_Construct_UFunction_UDonNavigator_OnLocomotionAbort());
				OuterClass->LinkChild(Z_Construct_UFunction_UDonNavigator_OnLocomotionBegin());
				OuterClass->LinkChild(Z_Construct_UFunction_UDonNavigator_OnLocomotionEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UDonNavigator_OnNextSegment());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UDonNavigator_AddMovementInputCustom(), "AddMovementInputCustom"); // 3208670525
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UDonNavigator_OnLocomotionAbort(), "OnLocomotionAbort"); // 1835794437
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UDonNavigator_OnLocomotionBegin(), "OnLocomotionBegin"); // 2334608215
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UDonNavigator_OnLocomotionEnd(), "OnLocomotionEnd"); // 1937223459
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UDonNavigator_OnNextSegment(), "OnNextSegment"); // 1855667375
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/DonNavigatorInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDonNavigator(Z_Construct_UClass_UDonNavigator, &UDonNavigator::StaticClass, TEXT("UDonNavigator"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDonNavigator);
	UScriptStruct* Z_Construct_UScriptStruct_FNAVMapContainer()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FNAVMapContainer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("NAVMapContainer"), sizeof(FNAVMapContainer), Get_Z_Construct_UScriptStruct_FNAVMapContainer_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NAVMapContainer"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNAVMapContainer>, EStructFlags(0x00000005));
			UProperty* NewProp_neighbors = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("neighbors"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(neighbors, FNAVMapContainer), 0x0010008000000008);
			UProperty* NewProp_neighbors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_neighbors, TEXT("neighbors"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_volume = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("volume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(volume, FNAVMapContainer), 0x0010000000080008, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_neighbors, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_neighbors, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_volume, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_volume, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNAVMapContainer_CRC() { return 461863181U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNavigationGraphAerial()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DonAINavigation();
		extern uint32 Get_Z_Construct_UScriptStruct_FNavigationGraphAerial_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("NavigationGraphAerial"), sizeof(FNavigationGraphAerial), Get_Z_Construct_UScriptStruct_FNavigationGraphAerial_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavigationGraphAerial"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNavigationGraphAerial>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNavigationGraphAerial_CRC() { return 1663652374U; }
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_BuildNAVNetwork()
	{
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildNAVNetwork"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NAVBuilder"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_CleanUp()
	{
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CleanUp"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NAVBuilder"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_ConstructBuilder()
	{
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConstructBuilder"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NAVBuilder"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_CreateNAVVolume()
	{
		struct VolumeAdaptiveBuilder_eventCreateNAVVolume_Parms
		{
			FVector Location;
			FName VolumeName;
			int32 SeedX;
			int32 SeedY;
			int32 SeedZ;
			UDoNNavigationVolumeComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateNAVVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(VolumeAdaptiveBuilder_eventCreateNAVVolume_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VolumeAdaptiveBuilder_eventCreateNAVVolume_Parms), 0x0010000000080588, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_SeedZ = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SeedZ"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SeedZ, VolumeAdaptiveBuilder_eventCreateNAVVolume_Parms), 0x0010000000000080);
			UProperty* NewProp_SeedY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SeedY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SeedY, VolumeAdaptiveBuilder_eventCreateNAVVolume_Parms), 0x0010000000000080);
			UProperty* NewProp_SeedX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SeedX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SeedX, VolumeAdaptiveBuilder_eventCreateNAVVolume_Parms), 0x0010000000000080);
			UProperty* NewProp_VolumeName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(VolumeName, VolumeAdaptiveBuilder_eventCreateNAVVolume_Parms), 0x0010000000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, VolumeAdaptiveBuilder_eventCreateNAVVolume_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NAVBuilder"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GenerateAdaptiveNavigationVolumeSeeds()
	{
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GenerateAdaptiveNavigationVolumeSeeds"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NAVBuilder"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetNAVVolumeFromComponent()
	{
		struct VolumeAdaptiveBuilder_eventGetNAVVolumeFromComponent_Parms
		{
			UPrimitiveComponent* Component;
			FVector ComponentAt;
			UDoNNavigationVolumeComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNAVVolumeFromComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14820401, 65535, sizeof(VolumeAdaptiveBuilder_eventGetNAVVolumeFromComponent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VolumeAdaptiveBuilder_eventGetNAVVolumeFromComponent_Parms), 0x0010000000080588, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_ComponentAt = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentAt"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ComponentAt, VolumeAdaptiveBuilder_eventGetNAVVolumeFromComponent_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Component = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Component"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Component, VolumeAdaptiveBuilder_eventGetNAVVolumeFromComponent_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Component, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetNAVVolumeFromObject()
	{
		struct VolumeAdaptiveBuilder_eventGetNAVVolumeFromObject_Parms
		{
			UObject* Actor;
			UDoNNavigationVolumeComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNAVVolumeFromObject"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(VolumeAdaptiveBuilder_eventGetNAVVolumeFromObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VolumeAdaptiveBuilder_eventGetNAVVolumeFromObject_Parms), 0x0010000000080588, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, VolumeAdaptiveBuilder_eventGetNAVVolumeFromObject_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Utility functions"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetShortestPathToDestination()
	{
		struct VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms
		{
			FVector origin;
			FVector destination;
			UDoNNavigationVolumeComponent* originVolume;
			UDoNNavigationVolumeComponent* destinationVolume;
			TArray<FVector> PathSolutionRaw;
			TArray<FVector> PathSolutionOptimized;
			bool DrawDebugVolumes;
			bool VisualizeRawPath;
			bool VisualizeOptimizedPath;
			bool VisualizeInRealTime;
			float LineThickness;
			TArray<UDoNNavigationVolumeComponent*> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetShortestPathToDestination"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010008000000588);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_LineThickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineThickness, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualizeInRealTime, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms, bool);
			UProperty* NewProp_VisualizeInRealTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VisualizeInRealTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualizeInRealTime, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(VisualizeInRealTime, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualizeOptimizedPath, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms, bool);
			UProperty* NewProp_VisualizeOptimizedPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VisualizeOptimizedPath"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualizeOptimizedPath, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(VisualizeOptimizedPath, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualizeRawPath, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms, bool);
			UProperty* NewProp_VisualizeRawPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VisualizeRawPath"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualizeRawPath, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(VisualizeRawPath, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebugVolumes, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms, bool);
			UProperty* NewProp_DrawDebugVolumes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebugVolumes, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawDebugVolumes, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), sizeof(bool), true);
			UProperty* NewProp_PathSolutionOptimized = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolutionOptimized"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolutionOptimized, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000000180);
			UProperty* NewProp_PathSolutionOptimized_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolutionOptimized, TEXT("PathSolutionOptimized"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PathSolutionRaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolutionRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolutionRaw, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000000180);
			UProperty* NewProp_PathSolutionRaw_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolutionRaw, TEXT("PathSolutionRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_destinationVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("destinationVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(destinationVolume, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_originVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("originVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(originVolume, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_destination = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("destination"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(destination, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("origin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(origin, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("This function is deprecated, please use FindPathSolution instead."));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns path solution using a dense network of UDoNNavigationVolumeComponent. Maps using the Adaptive Navigation Builder should use this function."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_destinationVolume, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_originVolume, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetShortestPathToDestination_DebugRealtime()
	{
		struct VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms
		{
			bool Reset;
			FVector origin;
			FVector destination;
			UDoNNavigationVolumeComponent* originVolume;
			UDoNNavigationVolumeComponent* destinationVolume;
			bool DrawDebug;
			TArray<FVector> PathSolutionRaw;
			TArray<FVector> PathSolutionOptimized;
			bool DrawDebugVolumes;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetShortestPathToDestination_DebugRealtime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebugVolumes, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms, bool);
			UProperty* NewProp_DrawDebugVolumes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebugVolumes, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawDebugVolumes, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), sizeof(bool), true);
			UProperty* NewProp_PathSolutionOptimized = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolutionOptimized"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolutionOptimized, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), 0x0010000000000180);
			UProperty* NewProp_PathSolutionOptimized_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolutionOptimized, TEXT("PathSolutionOptimized"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PathSolutionRaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolutionRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolutionRaw, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), 0x0010000000000180);
			UProperty* NewProp_PathSolutionRaw_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolutionRaw, TEXT("PathSolutionRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebug, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms, bool);
			UProperty* NewProp_DrawDebug = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebug"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebug, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawDebug, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), sizeof(bool), true);
			UProperty* NewProp_destinationVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("destinationVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(destinationVolume, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_originVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("originVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(originVolume, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_destination = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("destination"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(destination, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("origin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(origin, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Reset, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms, bool);
			UProperty* NewProp_Reset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reset"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Reset, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(Reset, VolumeAdaptiveBuilder_eventGetShortestPathToDestination_DebugRealtime_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_destinationVolume, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_originVolume, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GrowNAVVolumeByIndex()
	{
		struct VolumeAdaptiveBuilder_eventGrowNAVVolumeByIndex_Parms
		{
			UDoNNavigationVolumeComponent* volume;
			int32 XGrowth;
			int32 YGrowth;
			int32 ZGrowth;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GrowNAVVolumeByIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VolumeAdaptiveBuilder_eventGrowNAVVolumeByIndex_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VolumeAdaptiveBuilder_eventGrowNAVVolumeByIndex_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VolumeAdaptiveBuilder_eventGrowNAVVolumeByIndex_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VolumeAdaptiveBuilder_eventGrowNAVVolumeByIndex_Parms), sizeof(bool), true);
			UProperty* NewProp_ZGrowth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ZGrowth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ZGrowth, VolumeAdaptiveBuilder_eventGrowNAVVolumeByIndex_Parms), 0x0010000000000080);
			UProperty* NewProp_YGrowth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("YGrowth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(YGrowth, VolumeAdaptiveBuilder_eventGrowNAVVolumeByIndex_Parms), 0x0010000000000080);
			UProperty* NewProp_XGrowth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("XGrowth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(XGrowth, VolumeAdaptiveBuilder_eventGrowNAVVolumeByIndex_Parms), 0x0010000000000080);
			UProperty* NewProp_volume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("volume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(volume, VolumeAdaptiveBuilder_eventGrowNAVVolumeByIndex_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NAVBuilder"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_volume, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavEntryPointFromPath()
	{
		struct VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms
		{
			FVector Origin;
			FVector FinalDestination;
			int32 currentVolumeIndex;
			TArray<UDoNNavigationVolumeComponent*> path;
			bool VolumeTraversalImminent;
			int32 newVolumeIndex;
			bool DrawDebugVolumes;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavEntryPointFromPath"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C20401, 65535, sizeof(VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebugVolumes, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms, bool);
			UProperty* NewProp_DrawDebugVolumes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebugVolumes, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawDebugVolumes, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms), sizeof(bool), true);
			UProperty* NewProp_newVolumeIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("newVolumeIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(newVolumeIndex, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VolumeTraversalImminent, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms, bool);
			UProperty* NewProp_VolumeTraversalImminent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeTraversalImminent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VolumeTraversalImminent, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(VolumeTraversalImminent, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms), sizeof(bool), true);
			UProperty* NewProp_path = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("path"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(path, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms), 0x0010008000000080);
			UProperty* NewProp_path_Inner = new(EC_InternalUseOnlyConstructor, NewProp_path, TEXT("path"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_currentVolumeIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("currentVolumeIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(currentVolumeIndex, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms), 0x0010000000000080);
			UProperty* NewProp_FinalDestination = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FinalDestination"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FinalDestination, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Origin, VolumeAdaptiveBuilder_eventNavEntryPointFromPath_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_path, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavEntryPointsForTraversal()
	{
		struct VolumeAdaptiveBuilder_eventNavEntryPointsForTraversal_Parms
		{
			FVector Origin;
			UDoNNavigationVolumeComponent* CurrentVolume;
			UDoNNavigationVolumeComponent* DestinationVolume;
			float SegmentDist;
			bool DrawDebug;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavEntryPointsForTraversal"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C20401, 65535, sizeof(VolumeAdaptiveBuilder_eventNavEntryPointsForTraversal_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VolumeAdaptiveBuilder_eventNavEntryPointsForTraversal_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebug, VolumeAdaptiveBuilder_eventNavEntryPointsForTraversal_Parms, bool);
			UProperty* NewProp_DrawDebug = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebug"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebug, VolumeAdaptiveBuilder_eventNavEntryPointsForTraversal_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawDebug, VolumeAdaptiveBuilder_eventNavEntryPointsForTraversal_Parms), sizeof(bool), true);
			UProperty* NewProp_SegmentDist = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SegmentDist"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SegmentDist, VolumeAdaptiveBuilder_eventNavEntryPointsForTraversal_Parms), 0x0010000000000180);
			UProperty* NewProp_DestinationVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DestinationVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DestinationVolume, VolumeAdaptiveBuilder_eventNavEntryPointsForTraversal_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_CurrentVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurrentVolume, VolumeAdaptiveBuilder_eventNavEntryPointsForTraversal_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Origin, VolumeAdaptiveBuilder_eventNavEntryPointsForTraversal_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_DestinationVolume, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_CurrentVolume, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavigaitonEntryPoint()
	{
		struct VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms
		{
			AActor* Actor;
			UDoNNavigationVolumeComponent* CurrentVolume;
			UDoNNavigationVolumeComponent* DestinationVolume;
			bool VolumeTraversalImminent;
			bool overlapsX;
			bool overlapsY;
			bool overlapsZ;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavigaitonEntryPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C20401, 65535, sizeof(VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(overlapsZ, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms, bool);
			UProperty* NewProp_overlapsZ = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("overlapsZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(overlapsZ, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(overlapsZ, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(overlapsY, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms, bool);
			UProperty* NewProp_overlapsY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("overlapsY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(overlapsY, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(overlapsY, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(overlapsX, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms, bool);
			UProperty* NewProp_overlapsX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("overlapsX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(overlapsX, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(overlapsX, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VolumeTraversalImminent, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms, bool);
			UProperty* NewProp_VolumeTraversalImminent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeTraversalImminent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VolumeTraversalImminent, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(VolumeTraversalImminent, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), sizeof(bool), true);
			UProperty* NewProp_DestinationVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DestinationVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DestinationVolume, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_CurrentVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurrentVolume, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, VolumeAdaptiveBuilder_eventNavigaitonEntryPoint_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_DestinationVolume, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_CurrentVolume, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavigaitonEntryPointFromVector()
	{
		struct VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms
		{
			FVector Origin;
			UDoNNavigationVolumeComponent* CurrentVolume;
			UDoNNavigationVolumeComponent* DestinationVolume;
			bool VolumeTraversalImminent;
			bool overlapsX;
			bool overlapsY;
			bool overlapsZ;
			bool DrawDebug;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavigaitonEntryPointFromVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C20401, 65535, sizeof(VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebug, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms, bool);
			UProperty* NewProp_DrawDebug = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebug"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebug, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawDebug, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(overlapsZ, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms, bool);
			UProperty* NewProp_overlapsZ = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("overlapsZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(overlapsZ, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(overlapsZ, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(overlapsY, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms, bool);
			UProperty* NewProp_overlapsY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("overlapsY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(overlapsY, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(overlapsY, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(overlapsX, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms, bool);
			UProperty* NewProp_overlapsX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("overlapsX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(overlapsX, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(overlapsX, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VolumeTraversalImminent, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms, bool);
			UProperty* NewProp_VolumeTraversalImminent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeTraversalImminent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VolumeTraversalImminent, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(VolumeTraversalImminent, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), sizeof(bool), true);
			UProperty* NewProp_DestinationVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DestinationVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DestinationVolume, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_CurrentVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurrentVolume, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), 0x0010000000080080, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Origin, VolumeAdaptiveBuilder_eventNavigaitonEntryPointFromVector_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Navigation traversal functions (for Adapive Builder only)"));
			MetaData->SetValue(NewProp_DestinationVolume, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_CurrentVolume, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeNAVResult()
	{
		struct VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms
		{
			TArray<FVector> PathSolution;
			FVector Source;
			FVector Destination;
			bool Reset;
			bool DrawDebugVolumes;
			FColor LineColor;
			float LineThickness;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VisualizeNAVResult"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms));
			UProperty* NewProp_LineThickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineThickness, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms), 0x0010000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineColor, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebugVolumes, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms, bool);
			UProperty* NewProp_DrawDebugVolumes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebugVolumes, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawDebugVolumes, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Reset, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms, bool);
			UProperty* NewProp_Reset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reset"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Reset, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(Reset, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms), sizeof(bool), true);
			UProperty* NewProp_Destination = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Destination"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Destination, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Source"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Source, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PathSolution = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolution"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolution, VolumeAdaptiveBuilder_eventVisualizeNAVResult_Parms), 0x0010000008000182);
			UProperty* NewProp_PathSolution_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolution, TEXT("PathSolution"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("NAV Visualizer"));
			MetaData->SetValue(NewProp_PathSolution, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeNAVResultRealTime()
	{
		struct VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms
		{
			TArray<FVector> PathSolution;
			FVector Source;
			FVector Destination;
			bool Reset;
			bool DrawDebugVolumes;
			FColor LineColor;
			float LineThickness;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VisualizeNAVResultRealTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms));
			UProperty* NewProp_LineThickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineThickness, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms), 0x0010000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineColor, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebugVolumes, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms, bool);
			UProperty* NewProp_DrawDebugVolumes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebugVolumes, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawDebugVolumes, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Reset, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms, bool);
			UProperty* NewProp_Reset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reset"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Reset, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(Reset, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms), sizeof(bool), true);
			UProperty* NewProp_Destination = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Destination"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Destination, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Source"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Source, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PathSolution = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolution"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolution, VolumeAdaptiveBuilder_eventVisualizeNAVResultRealTime_Parms), 0x0010000008000182);
			UProperty* NewProp_PathSolution_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolution, TEXT("PathSolution"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_PathSolution, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeSolution()
	{
		struct VolumeAdaptiveBuilder_eventVisualizeSolution_Parms
		{
			FVector source;
			FVector destination;
			TArray<FVector> PathSolutionRaw;
			TArray<FVector> PathSolutionOptimized;
			bool VisualizeRawPath;
			bool VisualizeOptimizedPath;
			bool VisualizeInRealTime;
			bool DrawDebugVolumes;
			float LineThickness;
		};
		UObject* Outer=Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VisualizeSolution"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(VolumeAdaptiveBuilder_eventVisualizeSolution_Parms));
			UProperty* NewProp_LineThickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineThickness, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebugVolumes, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms, bool);
			UProperty* NewProp_DrawDebugVolumes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebugVolumes, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawDebugVolumes, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualizeInRealTime, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms, bool);
			UProperty* NewProp_VisualizeInRealTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VisualizeInRealTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualizeInRealTime, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(VisualizeInRealTime, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualizeOptimizedPath, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms, bool);
			UProperty* NewProp_VisualizeOptimizedPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VisualizeOptimizedPath"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualizeOptimizedPath, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(VisualizeOptimizedPath, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualizeRawPath, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms, bool);
			UProperty* NewProp_VisualizeRawPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VisualizeRawPath"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualizeRawPath, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(VisualizeRawPath, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), sizeof(bool), true);
			UProperty* NewProp_PathSolutionOptimized = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolutionOptimized"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolutionOptimized, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), 0x0010000008000182);
			UProperty* NewProp_PathSolutionOptimized_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolutionOptimized, TEXT("PathSolutionOptimized"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PathSolutionRaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathSolutionRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathSolutionRaw, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), 0x0010000008000182);
			UProperty* NewProp_PathSolutionRaw_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathSolutionRaw, TEXT("PathSolutionRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_destination = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("destination"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(destination, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_source = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("source"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(source, VolumeAdaptiveBuilder_eventVisualizeSolution_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AerialNavigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
			MetaData->SetValue(NewProp_PathSolutionOptimized, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_PathSolutionRaw, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder_NoRegister()
	{
		return ADEPRECATED_VolumeAdaptiveBuilder::StaticClass();
	}
	UClass* Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_DonAINavigation();
			OuterClass = ADEPRECATED_VolumeAdaptiveBuilder::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x22800280;

				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_BuildNAVNetwork());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_CleanUp());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_ConstructBuilder());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_CreateNAVVolume());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GenerateAdaptiveNavigationVolumeSeeds());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetNAVVolumeFromComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetNAVVolumeFromObject());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetShortestPathToDestination());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetShortestPathToDestination_DebugRealtime());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GrowNAVVolumeByIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavEntryPointFromPath());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavEntryPointsForTraversal());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavigaitonEntryPoint());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavigaitonEntryPointFromVector());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeNAVResult());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeNAVResultRealTime());
				OuterClass->LinkChild(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeSolution());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ActorsToIgnoreForCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActorsToIgnoreForCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnoreForCollision, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_ActorsToIgnoreForCollision_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnoreForCollision, TEXT("ActorsToIgnoreForCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_NAVOverlapQuery = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NAVOverlapQuery"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(NAVOverlapQuery, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_NAVOverlapQuery_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NAVOverlapQuery, TEXT("NAVOverlapQuery"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
				UProperty* NewProp_ObstacleList = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ObstacleList"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ObstacleList, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_ObstacleList_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObstacleList, TEXT("ObstacleList"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsVisibleInGame, ADEPRECATED_VolumeAdaptiveBuilder, bool);
				UProperty* NewProp_IsVisibleInGame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsVisibleInGame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsVisibleInGame, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(IsVisibleInGame, ADEPRECATED_VolumeAdaptiveBuilder), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsVisibleBlockedVolumes, ADEPRECATED_VolumeAdaptiveBuilder, bool);
				UProperty* NewProp_IsVisibleBlockedVolumes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsVisibleBlockedVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsVisibleBlockedVolumes, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(IsVisibleBlockedVolumes, ADEPRECATED_VolumeAdaptiveBuilder), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsVisibleNavigableVolumes, ADEPRECATED_VolumeAdaptiveBuilder, bool);
				UProperty* NewProp_IsVisibleNavigableVolumes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsVisibleNavigableVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsVisibleNavigableVolumes, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(IsVisibleNavigableVolumes, ADEPRECATED_VolumeAdaptiveBuilder), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DisplayNAVNeighborGraph, ADEPRECATED_VolumeAdaptiveBuilder, bool);
				UProperty* NewProp_DisplayNAVNeighborGraph = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DisplayNAVNeighborGraph"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DisplayNAVNeighborGraph, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(DisplayNAVNeighborGraph, ADEPRECATED_VolumeAdaptiveBuilder), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CleanUpAllData, ADEPRECATED_VolumeAdaptiveBuilder, bool);
				UProperty* NewProp_CleanUpAllData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CleanUpAllData"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CleanUpAllData, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(CleanUpAllData, ADEPRECATED_VolumeAdaptiveBuilder), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RegenerateNAVNetwork, ADEPRECATED_VolumeAdaptiveBuilder, bool);
				UProperty* NewProp_RegenerateNAVNetwork = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RegenerateNAVNetwork"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RegenerateNAVNetwork, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(RegenerateNAVNetwork, ADEPRECATED_VolumeAdaptiveBuilder), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(GenerateNavigationVolumes, ADEPRECATED_VolumeAdaptiveBuilder, bool);
				UProperty* NewProp_GenerateNavigationVolumes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GenerateNavigationVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(GenerateNavigationVolumes, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(GenerateNavigationVolumes, ADEPRECATED_VolumeAdaptiveBuilder), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseAspectRatioThreshold, ADEPRECATED_VolumeAdaptiveBuilder, bool);
				UProperty* NewProp_UseAspectRatioThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseAspectRatioThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseAspectRatioThreshold, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(UseAspectRatioThreshold, ADEPRECATED_VolumeAdaptiveBuilder), sizeof(bool), true);
				UProperty* NewProp_XYAspectRatioThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("XYAspectRatioThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(XYAspectRatioThreshold, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_ZGridSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ZGridSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ZGridSize, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_YGridSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("YGridSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(YGridSize, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_XGridSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("XGridSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(XGridSize, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_FloorClearance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FloorClearance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloorClearance, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_OffsetThickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OffsetThickness, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_ZBaseUnit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ZBaseUnit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ZBaseUnit, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_YBaseUnit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("YBaseUnit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(YBaseUnit, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_XBaseUnit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("XBaseUnit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(XBaseUnit, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005);
				UProperty* NewProp_SeedVisualizer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SeedVisualizer"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SeedVisualizer, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000000005, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_NAVVolumeComponents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NAVVolumeComponents"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(NAVVolumeComponents, ADEPRECATED_VolumeAdaptiveBuilder), 0x001000800003001d);
				UProperty* NewProp_NAVVolumeComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NAVVolumeComponents, TEXT("NAVVolumeComponents"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x00000000000a0008, Z_Construct_UClass_UDoNNavigationVolumeComponent_NoRegister());
				UProperty* NewProp_Billboard = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Billboard"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Billboard, ADEPRECATED_VolumeAdaptiveBuilder), 0x00100000000b001d, Z_Construct_UClass_UBillboardComponent_NoRegister());
				UProperty* NewProp_SceneComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SceneComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SceneComponent, ADEPRECATED_VolumeAdaptiveBuilder), 0x00100000000b001d, Z_Construct_UClass_USceneComponent_NoRegister());
				UProperty* NewProp_NavGraph_GCSafe = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavGraph_GCSafe"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(NavGraph_GCSafe, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010008000020015);
				UProperty* NewProp_NavGraph_GCSafe_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NavGraph_GCSafe, TEXT("NavGraph_GCSafe"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000020000, Z_Construct_UScriptStruct_FNAVMapContainer());
				UProperty* NewProp_NavGraph = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavGraph"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NavGraph, ADEPRECATED_VolumeAdaptiveBuilder), 0x0010000000020015, Z_Construct_UScriptStruct_FNavigationGraphAerial());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_BuildNAVNetwork(), "BuildNAVNetwork"); // 2782450098
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_CleanUp(), "CleanUp"); // 3155942022
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_ConstructBuilder(), "ConstructBuilder"); // 4266607282
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_CreateNAVVolume(), "CreateNAVVolume"); // 2810399073
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GenerateAdaptiveNavigationVolumeSeeds(), "GenerateAdaptiveNavigationVolumeSeeds"); // 1731517657
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetNAVVolumeFromComponent(), "GetNAVVolumeFromComponent"); // 3199225986
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetNAVVolumeFromObject(), "GetNAVVolumeFromObject"); // 1360261155
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetShortestPathToDestination(), "GetShortestPathToDestination"); // 2863910452
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GetShortestPathToDestination_DebugRealtime(), "GetShortestPathToDestination_DebugRealtime"); // 81411842
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_GrowNAVVolumeByIndex(), "GrowNAVVolumeByIndex"); // 826891719
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavEntryPointFromPath(), "NavEntryPointFromPath"); // 2166519054
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavEntryPointsForTraversal(), "NavEntryPointsForTraversal"); // 363464013
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavigaitonEntryPoint(), "NavigaitonEntryPoint"); // 1147018947
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_NavigaitonEntryPointFromVector(), "NavigaitonEntryPointFromVector"); // 1767463075
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeNAVResult(), "VisualizeNAVResult"); // 3147177562
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeNAVResultRealTime(), "VisualizeNAVResultRealTime"); // 210984713
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADEPRECATED_VolumeAdaptiveBuilder_VisualizeSolution(), "VisualizeSolution"); // 3968196593
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_ActorsToIgnoreForCollision, TEXT("Category"), TEXT("ObstacleDetection"));
				MetaData->SetValue(NewProp_ActorsToIgnoreForCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_NAVOverlapQuery, TEXT("Category"), TEXT("ObstacleDetection"));
				MetaData->SetValue(NewProp_NAVOverlapQuery, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_ObstacleList, TEXT("Category"), TEXT("ObstacleDetection"));
				MetaData->SetValue(NewProp_ObstacleList, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_IsVisibleInGame, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_IsVisibleInGame, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_IsVisibleBlockedVolumes, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_IsVisibleBlockedVolumes, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_IsVisibleNavigableVolumes, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_IsVisibleNavigableVolumes, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_DisplayNAVNeighborGraph, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_DisplayNAVNeighborGraph, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_CleanUpAllData, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_CleanUpAllData, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_RegenerateNAVNetwork, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_RegenerateNAVNetwork, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_GenerateNavigationVolumes, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_GenerateNavigationVolumes, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_GenerateNavigationVolumes, TEXT("ToolTip"), TEXT("wrong use of \"threshold\" here :P"));
				MetaData->SetValue(NewProp_UseAspectRatioThreshold, TEXT("Category"), TEXT("WorldDimensinos"));
				MetaData->SetValue(NewProp_UseAspectRatioThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_UseAspectRatioThreshold, TEXT("ToolTip"), TEXT("wrong use of \"threshold\" here :P"));
				MetaData->SetValue(NewProp_XYAspectRatioThreshold, TEXT("Category"), TEXT("WorldDimensinos"));
				MetaData->SetValue(NewProp_XYAspectRatioThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_ZGridSize, TEXT("Category"), TEXT("WorldDimensinos"));
				MetaData->SetValue(NewProp_ZGridSize, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_YGridSize, TEXT("Category"), TEXT("WorldDimensinos"));
				MetaData->SetValue(NewProp_YGridSize, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_XGridSize, TEXT("Category"), TEXT("WorldDimensinos"));
				MetaData->SetValue(NewProp_XGridSize, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_FloorClearance, TEXT("Category"), TEXT("PixelDimensions"));
				MetaData->SetValue(NewProp_FloorClearance, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_OffsetThickness, TEXT("Category"), TEXT("PixelDimensions"));
				MetaData->SetValue(NewProp_OffsetThickness, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_OffsetThickness, TEXT("ToolTip"), TEXT("UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = PixelDimensions)\nfloat OverlapThickness;"));
				MetaData->SetValue(NewProp_ZBaseUnit, TEXT("Category"), TEXT("PixelDimensions"));
				MetaData->SetValue(NewProp_ZBaseUnit, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_YBaseUnit, TEXT("Category"), TEXT("PixelDimensions"));
				MetaData->SetValue(NewProp_YBaseUnit, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_XBaseUnit, TEXT("Category"), TEXT("PixelDimensions"));
				MetaData->SetValue(NewProp_XBaseUnit, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_XBaseUnit, TEXT("ToolTip"), TEXT("UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = PixelDimensions)\nFNAVSeedXyz NAVVolumeData;"));
				MetaData->SetValue(NewProp_SeedVisualizer, TEXT("Category"), TEXT("ParticleSystem"));
				MetaData->SetValue(NewProp_SeedVisualizer, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_SeedVisualizer, TEXT("ToolTip"), TEXT("UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = PixelDimensions)\nFNAVSeedXyz NAVSeedData;"));
				MetaData->SetValue(NewProp_NAVVolumeComponents, TEXT("Category"), TEXT("Translation"));
				MetaData->SetValue(NewProp_NAVVolumeComponents, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_NAVVolumeComponents, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_Billboard, TEXT("Category"), TEXT("Translation"));
				MetaData->SetValue(NewProp_Billboard, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Billboard, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_SceneComponent, TEXT("Category"), TEXT("Translation"));
				MetaData->SetValue(NewProp_SceneComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SceneComponent, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_NavGraph_GCSafe, TEXT("Category"), TEXT("AerialNavigation"));
				MetaData->SetValue(NewProp_NavGraph_GCSafe, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
				MetaData->SetValue(NewProp_NavGraph, TEXT("Category"), TEXT("AerialNavigation"));
				MetaData->SetValue(NewProp_NavGraph, TEXT("ModuleRelativePath"), TEXT("Classes/Legacy/DEPRECATED_VolumeAdaptiveBuilder.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ADEPRECATED_VolumeAdaptiveBuilder(Z_Construct_UClass_ADEPRECATED_VolumeAdaptiveBuilder, &ADEPRECATED_VolumeAdaptiveBuilder::StaticClass, TEXT("ADEPRECATED_VolumeAdaptiveBuilder"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ADEPRECATED_VolumeAdaptiveBuilder);
	UPackage* Z_Construct_UPackage__Script_DonAINavigation()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/DonAINavigation")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xB48430F6;
			Guid.B = 0x4E98E4E0;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_DonAINavigation_DonNavigationDynamicCollisionDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_DonAINavigation_DoNNavigationResultHandler__DelegateSignature();
			Z_Construct_UDelegateFunction_DonAINavigation_DonCollisionSamplerCallback__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
